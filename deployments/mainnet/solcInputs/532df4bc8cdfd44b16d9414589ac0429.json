{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard.\n *\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\n *\n * _Available since v4.5._\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\n     * initialization.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized < type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/access/Governable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Context.sol\";\r\nimport \"../interfaces/IGovernable.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (governor) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * By default, the governor account will be the one that deploys the contract. This\r\n * can later be changed with {transferGovernorship}.\r\n *\r\n */\r\nabstract contract Governable is IGovernable, Context, Initializable {\r\n    address public governor;\r\n    address private proposedGovernor;\r\n\r\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial governor.\r\n     */\r\n    constructor() {\r\n        address msgSender = _msgSender();\r\n        governor = msgSender;\r\n        emit UpdatedGovernor(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the deployer as the initial governor.\r\n     */\r\n    // solhint-disable-next-line func-name-mixedcase\r\n    function __Governable_init() internal onlyInitializing {\r\n        address msgSender = _msgSender();\r\n        governor = msgSender;\r\n        emit UpdatedGovernor(address(0), msgSender);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the governor.\r\n     */\r\n    modifier onlyGovernor() {\r\n        require(governor == _msgSender(), \"not governor\");\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\r\n     * Can only be called by the current governor.\r\n     */\r\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\r\n        require(_proposedGovernor != address(0), \"invalid proposed governor\");\r\n        proposedGovernor = _proposedGovernor;\r\n    }\r\n\r\n    /**\r\n     * @dev Allows new governor to accept governorship of the contract.\r\n     */\r\n    function acceptGovernorship() external {\r\n        require(proposedGovernor == _msgSender(), \"not the proposed governor\");\r\n        emit UpdatedGovernor(governor, proposedGovernor);\r\n        governor = proposedGovernor;\r\n        proposedGovernor = address(0);\r\n    }\r\n\r\n    /**\r\n     * @dev This empty reserved space is put in place to allow future versions to add new\r\n     * variables without shifting down storage in the inheritance chain.\r\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n     */\r\n    uint256[49] private __gap;\r\n}\r\n"
    },
    "contracts/interfaces/ICapsule.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\r\nimport \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\r\n\r\ninterface ICapsule is IERC721, IERC2981 {\r\n    function mint(address account, string memory _uri) external;\r\n\r\n    function burn(address owner, uint256 tokenId) external;\r\n\r\n    function setMetadataProvider(address _metadataAddress) external;\r\n\r\n    // Read functions\r\n    function baseURI() external view returns (string memory);\r\n\r\n    function counter() external view returns (uint256);\r\n\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n\r\n    function isCollectionMinter(address _account) external view returns (bool);\r\n\r\n    function isCollectionPrivate() external view returns (bool);\r\n\r\n    function maxId() external view returns (uint256);\r\n\r\n    function royaltyRate() external view returns (uint256);\r\n\r\n    function royaltyReceiver() external view returns (address);\r\n\r\n    function tokenURIOwner() external view returns (address);\r\n\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    //     Extra functions compare to original ICapsule interface    ///////////\r\n    ////////////////////////////////////////////////////////////////////////////\r\n    // Read functions\r\n    function owner() external view returns (address);\r\n\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n\r\n    // Admin functions\r\n    function lockCollectionCount(uint256 _nftCount) external;\r\n\r\n    function setBaseURI(string calldata baseURI_) external;\r\n\r\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\r\n\r\n    function transferOwnership(address _newOwner) external;\r\n\r\n    function updateTokenURIOwner(address _newTokenURIOwner) external;\r\n\r\n    function updateRoyaltyConfig(address _royaltyReceiver, uint256 _royaltyRate) external;\r\n}\r\n"
    },
    "contracts/interfaces/ICapsuleFactory.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"./IGovernable.sol\";\r\n\r\ninterface ICapsuleFactory is IGovernable {\r\n    function capsuleCollectionTax() external view returns (uint256);\r\n\r\n    function capsuleMinter() external view returns (address);\r\n\r\n    function createCapsuleCollection(\r\n        string memory _name,\r\n        string memory _symbol,\r\n        address _tokenURIOwner,\r\n        bool _isCollectionPrivate\r\n    ) external payable returns (address);\r\n\r\n    function collectionBurner(address _capsule) external view returns (address);\r\n\r\n    function getAllCapsuleCollections() external view returns (address[] memory);\r\n\r\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\r\n\r\n    function getBlacklist() external view returns (address[] memory);\r\n\r\n    function getWhitelist() external view returns (address[] memory);\r\n\r\n    function isBlacklisted(address _user) external view returns (bool);\r\n\r\n    function isCapsule(address _capsule) external view returns (bool);\r\n\r\n    function isCollectionBurner(address _capsuleCollection, address _account) external view returns (bool);\r\n\r\n    function isWhitelisted(address _user) external view returns (bool);\r\n\r\n    function taxCollector() external view returns (address);\r\n\r\n    //solhint-disable-next-line func-name-mixedcase\r\n    function VERSION() external view returns (string memory);\r\n\r\n    // Special permission functions\r\n    function addToWhitelist(address _user) external;\r\n\r\n    function removeFromWhitelist(address _user) external;\r\n\r\n    function addToBlacklist(address _user) external;\r\n\r\n    function removeFromBlacklist(address _user) external;\r\n\r\n    function flushTaxAmount() external;\r\n\r\n    function setCapsuleMinter(address _newCapsuleMinter) external;\r\n\r\n    function updateCapsuleCollectionBurner(address _capsuleCollection, address _newBurner) external;\r\n\r\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\r\n\r\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\r\n\r\n    function updateTaxCollector(address _newTaxCollector) external;\r\n}\r\n"
    },
    "contracts/interfaces/ICapsuleMinter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"./IGovernable.sol\";\r\nimport \"./ICapsuleFactory.sol\";\r\n\r\ninterface ICapsuleMinter is IGovernable {\r\n    struct SingleERC20Capsule {\r\n        address tokenAddress;\r\n        uint256 tokenAmount;\r\n    }\r\n\r\n    struct MultiERC20Capsule {\r\n        address[] tokenAddresses;\r\n        uint256[] tokenAmounts;\r\n    }\r\n\r\n    struct SingleERC721Capsule {\r\n        address tokenAddress;\r\n        uint256 id;\r\n    }\r\n\r\n    struct MultiERC721Capsule {\r\n        address[] tokenAddresses;\r\n        uint256[] ids;\r\n    }\r\n\r\n    struct MultiERC1155Capsule {\r\n        address[] tokenAddresses;\r\n        uint256[] ids;\r\n        uint256[] tokenAmounts;\r\n    }\r\n\r\n    function capsuleMintTax() external view returns (uint256);\r\n\r\n    function factory() external view returns (ICapsuleFactory);\r\n\r\n    function getMintWhitelist() external view returns (address[] memory);\r\n\r\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\r\n\r\n    function getWhitelistedCallers() external view returns (address[] memory);\r\n\r\n    function isMintWhitelisted(address _user) external view returns (bool);\r\n\r\n    function isWhitelistedCaller(address _caller) external view returns (bool);\r\n\r\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\r\n\r\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\r\n\r\n    function multiERC1155Capsule(\r\n        address _capsule,\r\n        uint256 _id\r\n    ) external view returns (MultiERC1155Capsule memory _data);\r\n\r\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\r\n\r\n    function mintSimpleCapsule(address _capsule, string memory _uri, address _receiver) external payable;\r\n\r\n    function burnSimpleCapsule(address _capsule, uint256 _id, address _burnFrom) external;\r\n\r\n    function mintSingleERC20Capsule(\r\n        address _capsule,\r\n        address _token,\r\n        uint256 _amount,\r\n        string memory _uri,\r\n        address _receiver\r\n    ) external payable;\r\n\r\n    // @dev Legacy burn function\r\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\r\n\r\n    function burnSingleERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\r\n\r\n    function mintSingleERC721Capsule(\r\n        address _capsule,\r\n        address _token,\r\n        uint256 _id,\r\n        string memory _uri,\r\n        address _receiver\r\n    ) external payable;\r\n\r\n    function burnSingleERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\r\n\r\n    function mintMultiERC20Capsule(\r\n        address _capsule,\r\n        address[] memory _tokens,\r\n        uint256[] memory _amounts,\r\n        string memory _uri,\r\n        address _receiver\r\n    ) external payable;\r\n\r\n    function burnMultiERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\r\n\r\n    function mintMultiERC721Capsule(\r\n        address _capsule,\r\n        address[] memory _tokens,\r\n        uint256[] memory _ids,\r\n        string memory _uri,\r\n        address _receiver\r\n    ) external payable;\r\n\r\n    function burnMultiERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\r\n\r\n    function mintMultiERC1155Capsule(\r\n        address _capsule,\r\n        address[] memory _tokens,\r\n        uint256[] memory _ids,\r\n        uint256[] memory _amounts,\r\n        string memory _uri,\r\n        address _receiver\r\n    ) external payable;\r\n\r\n    function burnMultiERC1155Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\r\n\r\n    // Special permission functions\r\n    function addToWhitelist(address _user) external;\r\n\r\n    function removeFromWhitelist(address _user) external;\r\n\r\n    function flushTaxAmount() external;\r\n\r\n    function updateCapsuleMintTax(uint256 _newTax) external;\r\n\r\n    function updateWhitelistedCallers(address _caller) external;\r\n}\r\n"
    },
    "contracts/interfaces/IGovernable.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.15;\r\n\r\n/**\r\n * @notice Governable interface\r\n */\r\ninterface IGovernable {\r\n    function governor() external view returns (address _governor);\r\n\r\n    function transferGovernorship(address _proposedGovernor) external;\r\n}\r\n"
    },
    "contracts/OrdinaryOranges.sol": {
      "content": "// SPDX-License-Identifier: GPLv3\r\n\r\npragma solidity 0.8.15;\r\n\r\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\r\nimport \"./access/Governable.sol\";\r\nimport \"./interfaces/ICapsule.sol\";\r\nimport \"./interfaces/ICapsuleMinter.sol\";\r\n\r\n/// @title OrdinaryOranges\r\ncontract OrdinaryOranges is Governable, IERC721Receiver {\r\n\r\n    ICapsuleFactory public constant CAPSULE_FACTORY = ICapsuleFactory(0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB);\r\n    ICapsuleMinter public constant CAPSULE_MINTER = ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\r\n    ICapsule public immutable capsuleCollection;\r\n\r\n    /// @notice Team and giveaway mints\r\n    uint8 public constant TEAM_MINT = 16;\r\n    uint8 public constant GIVEAWAY_MINT = 16;\r\n\r\n    /// @notice Mint Fee\r\n    uint256 public OOMintFee = 1 ether;\r\n\r\n    /// @notice Flag indicating whether the OO mint is enabled.\r\n    bool public isMintEnabled;\r\n    \r\n    event OrdinaryOrangeMinted(address indexed user);\r\n    event OrdinaryOrangeBurnt(address indexed user, uint256 indexed id, string indexed btcAddress);\r\n    event MintToggled(bool mintStatus);\r\n\r\n    constructor(address _capsuleCollection) payable {\r\n        capsuleCollection = ICapsule(_capsuleCollection);\r\n    }\r\n\r\n    /// @notice Governor Mint\r\n    function governorMint() external payable {\r\n        address _caller = _msgSender();\r\n\r\n        require(_caller == governor, \"not-governor\");\r\n        require(capsuleCollection.counter() < TEAM_MINT + GIVEAWAY_MINT, \"governor-mint-period-over\");\r\n\r\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\r\n        // Hence passing empty token URI to mint function below.\r\n        CAPSULE_MINTER.mintSimpleCapsule{value: msg.value}(\r\n            address(capsuleCollection),\r\n            \"\",\r\n            _caller\r\n        );\r\n\r\n        emit OrdinaryOrangeMinted(_caller);\r\n    }\r\n\r\n\r\n    /// @notice Mint an Ordinary Orange to caller address\r\n    function mint() external payable {\r\n        require(isMintEnabled, \"mint-is-not-enabled\");\r\n        require(msg.value == OOMintFee, \"wrong-mint-fee-paid\");\r\n        \r\n        address _caller = _msgSender();\r\n\r\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\r\n        // Hence passing empty token URI to mint function below.\r\n        CAPSULE_MINTER.mintSimpleCapsule{value: 0.001 ether}(\r\n            address(capsuleCollection),\r\n            \"\",\r\n            _caller\r\n        );\r\n        emit OrdinaryOrangeMinted(_caller);\r\n    }\r\n\r\n    /**\r\n     * @notice Burn an OO\r\n     * @param id_ OO id to burn\r\n     * @param btcAddress the address on Bitcoin which will recieve the corresponding OO\r\n     */\r\n    function burn(uint256 id_, string memory btcAddress) external {\r\n        address _caller = _msgSender();\r\n        // Transfer OO to contract\r\n        capsuleCollection.safeTransferFrom(_caller, address(this), id_);\r\n        // Burn OO\r\n        CAPSULE_MINTER.burnSimpleCapsule(address(capsuleCollection), id_, address(this));\r\n        emit OrdinaryOrangeBurnt(_caller, id_, btcAddress);\r\n    }\r\n\r\n    /// @dev This function enables this contract to receive ERC721 tokens\r\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\r\n        return IERC721Receiver.onERC721Received.selector;\r\n    }\r\n\r\n    /******************************************************************************\r\n     *                            Governor functions                              *\r\n     *****************************************************************************/\r\n    /// @notice onlyGovernor:: Toggle minting status of the Ordinary Oranges\r\n    function toggleMint() external onlyGovernor {\r\n        isMintEnabled = !isMintEnabled;\r\n        emit MintToggled(isMintEnabled);\r\n    }\r\n\r\n    /**\r\n     * @notice onlyGovernor:: Transfer ownership of the Ordinary Oranges collection\r\n     * @param newOwner_ Address of new owner\r\n     */\r\n    function transferCollectionOwnership(address newOwner_) external onlyGovernor {\r\n        capsuleCollection.transferOwnership(newOwner_);\r\n    }\r\n\r\n    /**\r\n     * @notice onlyGovernor:: Set the collection baseURI\r\n     * @param baseURI_ New baseURI string\r\n     */\r\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\r\n        capsuleCollection.setBaseURI(baseURI_);\r\n    }\r\n\r\n    /**\r\n     * @notice Update collection burner. Add self address as collection burner for OO\r\n     */\r\n    function claimCollectionBurnerRole() external onlyGovernor {\r\n        CAPSULE_MINTER.factory().updateCapsuleCollectionBurner(address(capsuleCollection), address(this));\r\n    }\r\n\r\n    /**\r\n     * @notice onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection\r\n     * @param metamaster_ Address of new metamaster\r\n     */\r\n    function updateMetamaster(address metamaster_) external onlyGovernor {\r\n        capsuleCollection.updateTokenURIOwner(metamaster_);\r\n    }\r\n\r\n    /**\r\n     * @notice onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection\r\n     * @param royaltyReceiver_ Address of royalty receiver\r\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\r\n     */\r\n    function updateRoyaltyConfig(address royaltyReceiver_, uint256 royaltyRate_) external onlyGovernor {\r\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\r\n    }\r\n}\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
{
  "address": "0x91f020c259C119b10EaC5eB283e3CF829edCe1F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capsuleCollection",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintStatus",
          "type": "bool"
        }
      ],
      "name": "MintToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "OrdinaryOrangeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OrdinaryOrangeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAPSULE_FACTORY",
      "outputs": [
        {
          "internalType": "contract ICapsuleFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAPSULE_MINTER",
      "outputs": [
        {
          "internalType": "contract ICapsuleMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIVEAWAY_MINT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OOMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_MINT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capsuleCollection",
      "outputs": [
        {
          "internalType": "contract ICapsule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollectionBurnerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockCollectionCount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromToken",
          "type": "address"
        }
      ],
      "name": "sweep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferCollectionOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metamaster_",
          "type": "address"
        }
      ],
      "name": "updateMetamaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyReceiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyRate_",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x24939742de41f5e28f91f401b79e3c74cfd940a2509f9a8ac87b3b555e27d384",
  "receipt": {
    "to": null,
    "from": "0x53a50ac9Bb98dFd61d4031390ebecC4e2bD7f9b1",
    "contractAddress": "0x91f020c259C119b10EaC5eB283e3CF829edCe1F3",
    "transactionIndex": 89,
    "gasUsed": "2531617",
    "logsBloom": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008000000000000000000000000004000000000000000000000080000000000000000000000000000000000a0000000000000000000800000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000000010000000000000000000008000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000800000000000000000000000000",
    "blockHash": "0x3739ef41995255c69ec09b8f9dddc0685800d0d6b5ef25422c8df698992bcb25",
    "transactionHash": "0x24939742de41f5e28f91f401b79e3c74cfd940a2509f9a8ac87b3b555e27d384",
    "logs": [
      {
        "transactionIndex": 89,
        "blockNumber": 16611001,
        "transactionHash": "0x24939742de41f5e28f91f401b79e3c74cfd940a2509f9a8ac87b3b555e27d384",
        "address": "0x91f020c259C119b10EaC5eB283e3CF829edCe1F3",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053a50ac9bb98dfd61d4031390ebecc4e2bd7f9b1"
        ],
        "data": "0x",
        "logIndex": 195,
        "blockHash": "0x3739ef41995255c69ec09b8f9dddc0685800d0d6b5ef25422c8df698992bcb25"
      }
    ],
    "blockNumber": 16611001,
    "cumulativeGasUsed": "11402482",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b41F57D52FE6dB3a63bceB4E8845c0F9F31f859"
  ],
  "numDeployments": 2,
  "solcInputHash": "c1a277b33a914a44021aa2e1e02625d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsuleCollection\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintStatus\",\"type\":\"bool\"}],\"name\":\"MintToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"OrdinaryOrangeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OrdinaryOrangeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAPSULE_FACTORY\",\"outputs\":[{\"internalType\":\"contract ICapsuleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAPSULE_MINTER\",\"outputs\":[{\"internalType\":\"contract ICapsuleMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIVEAWAY_MINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capsuleCollection\",\"outputs\":[{\"internalType\":\"contract ICapsule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollectionBurnerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockCollectionCount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromToken\",\"type\":\"address\"}],\"name\":\"sweep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferCollectionOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metamaster_\",\"type\":\"address\"}],\"name\":\"updateMetamaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyRate_\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"burn(uint256,string)\":{\"params\":{\"btcAddress\":\"the address on Bitcoin which will receive the corresponding OO\",\"id_\":\"OO id to burn\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"This function enables this contract to receive ERC721 tokens\"},\"sweep(address)\":{\"params\":{\"_fromToken\":\"token address to sweep\"}},\"transferCollectionOwnership(address)\":{\"params\":{\"newOwner_\":\"Address of new owner\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor.\"},\"updateBaseURI(string)\":{\"params\":{\"baseURI_\":\"New baseURI string\"}},\"updateMetamaster(address)\":{\"params\":{\"metamaster_\":\"Address of new metamaster\"}},\"updateRoyaltyConfig(address,uint256)\":{\"params\":{\"royaltyRate_\":\"Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\",\"royaltyReceiver_\":\"Address of royalty receiver\"}}},\"title\":\"OrdinaryOranges\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OOMintFee()\":{\"notice\":\"Mint Fee\"},\"TEAM_MINT()\":{\"notice\":\"Team and giveaway mints\"},\"burn(uint256,string)\":{\"notice\":\"Burn an OO\"},\"claimCollectionBurnerRole()\":{\"notice\":\"Update collection burner. Add self address as collection burner for OO\"},\"governorMint()\":{\"notice\":\"Governor Mint\"},\"isMintEnabled()\":{\"notice\":\"Flag indicating whether the OO mint is enabled.\"},\"lockCollectionCount()\":{\"notice\":\"Lock collection at 256 max count\"},\"mint()\":{\"notice\":\"Mint an Ordinary Orange to caller address\"},\"sweep(address)\":{\"notice\":\"sweep given token to governor of strategy\"},\"toggleMint()\":{\"notice\":\"onlyGovernor:: Toggle minting status of the Ordinary Oranges\"},\"transferCollectionOwnership(address)\":{\"notice\":\"onlyGovernor:: Transfer ownership of the Ordinary Oranges collection\"},\"updateBaseURI(string)\":{\"notice\":\"onlyGovernor:: Set the collection baseURI\"},\"updateMetamaster(address)\":{\"notice\":\"onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection\"},\"updateRoyaltyConfig(address,uint256)\":{\"notice\":\"onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrdinaryOranges.sol\":\"OrdinaryOranges\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OrdinaryOranges.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./access/Governable.sol\\\";\\nimport \\\"./interfaces/ICapsule.sol\\\";\\nimport \\\"./interfaces/ICapsuleMinter.sol\\\";\\n\\n/// @title OrdinaryOranges\\ncontract OrdinaryOranges is Governable, IERC721Receiver {\\n    using SafeERC20 for IERC20;\\n    ICapsuleFactory public constant CAPSULE_FACTORY =\\n        ICapsuleFactory(0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB);\\n    ICapsuleMinter public constant CAPSULE_MINTER =\\n        ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\\n    ICapsule public immutable capsuleCollection;\\n\\n    /// @notice Team and giveaway mints\\n    uint8 public constant TEAM_MINT = 16;\\n    uint8 public constant GIVEAWAY_MINT = 16;\\n\\n    /// @notice Mint Fee\\n    uint256 public OOMintFee = 1 ether;\\n\\n    /// @notice Flag indicating whether the OO mint is enabled.\\n    bool public isMintEnabled;\\n\\n    event OrdinaryOrangeMinted(address indexed user);\\n    event OrdinaryOrangeBurnt(\\n        address indexed user,\\n        uint256 indexed id,\\n        string indexed btcAddress\\n    );\\n    event MintToggled(bool mintStatus);\\n\\n    constructor(address _capsuleCollection) payable {\\n        capsuleCollection = ICapsule(_capsuleCollection);\\n    }\\n\\n    /// @notice Governor Mint\\n    function governorMint() external payable {\\n        address _caller = _msgSender();\\n\\n        require(_caller == governor, \\\"not-governor\\\");\\n        require(\\n            capsuleCollection.counter() < TEAM_MINT + GIVEAWAY_MINT,\\n            \\\"governor-mint-period-over\\\"\\n        );\\n\\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\\n        // Hence passing empty token URI to mint function below.\\n        CAPSULE_MINTER.mintSimpleCapsule{value: msg.value}(\\n            address(capsuleCollection),\\n            \\\"\\\",\\n            _caller\\n        );\\n\\n        emit OrdinaryOrangeMinted(_caller);\\n    }\\n\\n    /// @notice Mint an Ordinary Orange to caller address\\n    function mint() external payable {\\n        require(isMintEnabled, \\\"mint-is-not-enabled\\\");\\n        require(msg.value == OOMintFee, \\\"wrong-mint-fee-paid\\\");\\n\\n        address _caller = _msgSender();\\n\\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\\n        // Hence passing empty token URI to mint function below.\\n        CAPSULE_MINTER.mintSimpleCapsule{value: 0.001 ether}(\\n            address(capsuleCollection),\\n            \\\"\\\",\\n            _caller\\n        );\\n        emit OrdinaryOrangeMinted(_caller);\\n    }\\n\\n    /**\\n     * @notice Burn an OO\\n     * @param id_ OO id to burn\\n     * @param btcAddress the address on Bitcoin which will receive the corresponding OO\\n     */\\n    function burn(uint256 id_, string memory btcAddress) external {\\n        address _caller = _msgSender();\\n        // Transfer OO to contract\\n        capsuleCollection.safeTransferFrom(_caller, address(this), id_);\\n        // Burn OO\\n        CAPSULE_MINTER.burnSimpleCapsule(\\n            address(capsuleCollection),\\n            id_,\\n            address(this)\\n        );\\n        emit OrdinaryOrangeBurnt(_caller, id_, btcAddress);\\n    }\\n\\n    /// @dev This function enables this contract to receive ERC721 tokens\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes calldata\\n    ) external pure returns (bytes4) {\\n        return IERC721Receiver.onERC721Received.selector;\\n    }\\n\\n    /******************************************************************************\\n     *                            Governor functions                              *\\n     *****************************************************************************/\\n\\n    /// @notice Lock collection at 256 max count\\n    function lockCollectionCount() external onlyGovernor {\\n        capsuleCollection.lockCollectionCount(256);\\n    }\\n\\n    /**\\n     * @notice sweep given token to governor of strategy\\n     * @param _fromToken token address to sweep\\n     */\\n    function sweep(address _fromToken) external onlyGovernor {\\n        if (_fromToken == address(0)) {\\n            Address.sendValue(payable(governor), address(this).balance);\\n        } else {\\n            uint256 _amount = IERC20(_fromToken).balanceOf(address(this));\\n            IERC20(_fromToken).safeTransfer(governor, _amount);\\n        }\\n    }\\n\\n    /// @notice onlyGovernor:: Toggle minting status of the Ordinary Oranges\\n    function toggleMint() external onlyGovernor {\\n        isMintEnabled = !isMintEnabled;\\n        emit MintToggled(isMintEnabled);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Transfer ownership of the Ordinary Oranges collection\\n     * @param newOwner_ Address of new owner\\n     */\\n    function transferCollectionOwnership(\\n        address newOwner_\\n    ) external onlyGovernor {\\n        capsuleCollection.transferOwnership(newOwner_);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Set the collection baseURI\\n     * @param baseURI_ New baseURI string\\n     */\\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\\n        capsuleCollection.setBaseURI(baseURI_);\\n    }\\n\\n    /**\\n     * @notice Update collection burner. Add self address as collection burner for OO\\n     */\\n    function claimCollectionBurnerRole() external onlyGovernor {\\n        CAPSULE_MINTER.factory().updateCapsuleCollectionBurner(\\n            address(capsuleCollection),\\n            address(this)\\n        );\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection\\n     * @param metamaster_ Address of new metamaster\\n     */\\n    function updateMetamaster(address metamaster_) external onlyGovernor {\\n        capsuleCollection.updateTokenURIOwner(metamaster_);\\n    }\\n\\n    /**\\n     * @notice onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection\\n     * @param royaltyReceiver_ Address of royalty receiver\\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\\n     */\\n    function updateRoyaltyConfig(\\n        address royaltyReceiver_,\\n        uint256 royaltyRate_\\n    ) external onlyGovernor {\\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\\n    }\\n}\\n\",\"keccak256\":\"0xf6698fbe7b8fc3c5471afe04005190ee42be498ceae8b65d2de4aec88d86503b\",\"license\":\"GPLv3\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"../interfaces/IGovernable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (governor) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the governor account will be the one that deploys the contract. This\\n * can later be changed with {transferGovernorship}.\\n *\\n */\\nabstract contract Governable is IGovernable, Context, Initializable {\\n    address public governor;\\n    address private proposedGovernor;\\n\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    constructor() {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __Governable_init() internal onlyInitializing {\\n        address msgSender = _msgSender();\\n        governor = msgSender;\\n        emit UpdatedGovernor(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the governor.\\n     */\\n    modifier onlyGovernor() {\\n        require(governor == _msgSender(), \\\"not governor\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\n     * Can only be called by the current governor.\\n     */\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\n        require(_proposedGovernor != address(0), \\\"invalid proposed governor\\\");\\n        proposedGovernor = _proposedGovernor;\\n    }\\n\\n    /**\\n     * @dev Allows new governor to accept governorship of the contract.\\n     */\\n    function acceptGovernorship() external {\\n        require(proposedGovernor == _msgSender(), \\\"not the proposed governor\\\");\\n        emit UpdatedGovernor(governor, proposedGovernor);\\n        governor = proposedGovernor;\\n        proposedGovernor = address(0);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe23df06c98c5886aedbddfb0278b178a00fd736d273c94cdfe67b65e77ac5ee4\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\ninterface ICapsule is IERC721, IERC2981 {\\n    function mint(address account, string memory _uri) external;\\n\\n    function burn(address owner, uint256 tokenId) external;\\n\\n    function setMetadataProvider(address _metadataAddress) external;\\n\\n    // Read functions\\n    function baseURI() external view returns (string memory);\\n\\n    function counter() external view returns (uint256);\\n\\n    function exists(uint256 tokenId) external view returns (bool);\\n\\n    function isCollectionMinter(address _account) external view returns (bool);\\n\\n    function isCollectionPrivate() external view returns (bool);\\n\\n    function maxId() external view returns (uint256);\\n\\n    function royaltyRate() external view returns (uint256);\\n\\n    function royaltyReceiver() external view returns (address);\\n\\n    function tokenURIOwner() external view returns (address);\\n\\n    ////////////////////////////////////////////////////////////////////////////\\n    //     Extra functions compare to original ICapsule interface    ///////////\\n    ////////////////////////////////////////////////////////////////////////////\\n    // Read functions\\n    function owner() external view returns (address);\\n\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n\\n    // Admin functions\\n    function lockCollectionCount(uint256 _nftCount) external;\\n\\n    function setBaseURI(string calldata baseURI_) external;\\n\\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\\n\\n    function transferOwnership(address _newOwner) external;\\n\\n    function updateTokenURIOwner(address _newTokenURIOwner) external;\\n\\n    function updateRoyaltyConfig(address _royaltyReceiver, uint256 _royaltyRate) external;\\n}\\n\",\"keccak256\":\"0x5c2df9c7efddafabe613ac507854452edaddf0157daa12122c6d5fa38c098935\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IGovernable.sol\\\";\\n\\ninterface ICapsuleFactory is IGovernable {\\n    function capsuleCollectionTax() external view returns (uint256);\\n\\n    function capsuleMinter() external view returns (address);\\n\\n    function createCapsuleCollection(\\n        string memory _name,\\n        string memory _symbol,\\n        address _tokenURIOwner,\\n        bool _isCollectionPrivate\\n    ) external payable returns (address);\\n\\n    function collectionBurner(address _capsule) external view returns (address);\\n\\n    function getAllCapsuleCollections() external view returns (address[] memory);\\n\\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\\n\\n    function getBlacklist() external view returns (address[] memory);\\n\\n    function getWhitelist() external view returns (address[] memory);\\n\\n    function isBlacklisted(address _user) external view returns (bool);\\n\\n    function isCapsule(address _capsule) external view returns (bool);\\n\\n    function isCollectionBurner(address _capsuleCollection, address _account) external view returns (bool);\\n\\n    function isWhitelisted(address _user) external view returns (bool);\\n\\n    function taxCollector() external view returns (address);\\n\\n    //solhint-disable-next-line func-name-mixedcase\\n    function VERSION() external view returns (string memory);\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function addToBlacklist(address _user) external;\\n\\n    function removeFromBlacklist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function setCapsuleMinter(address _newCapsuleMinter) external;\\n\\n    function updateCapsuleCollectionBurner(address _capsuleCollection, address _newBurner) external;\\n\\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\\n\\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\\n\\n    function updateTaxCollector(address _newTaxCollector) external;\\n}\\n\",\"keccak256\":\"0x6cfbdf22ee56c2cea8ff70412f9e9c6b24d772e6f304b446b60b59b4495c88e2\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\nimport \\\"./IGovernable.sol\\\";\\nimport \\\"./ICapsuleFactory.sol\\\";\\n\\ninterface ICapsuleMinter is IGovernable {\\n    struct SingleERC20Capsule {\\n        address tokenAddress;\\n        uint256 tokenAmount;\\n    }\\n\\n    struct MultiERC20Capsule {\\n        address[] tokenAddresses;\\n        uint256[] tokenAmounts;\\n    }\\n\\n    struct SingleERC721Capsule {\\n        address tokenAddress;\\n        uint256 id;\\n    }\\n\\n    struct MultiERC721Capsule {\\n        address[] tokenAddresses;\\n        uint256[] ids;\\n    }\\n\\n    struct MultiERC1155Capsule {\\n        address[] tokenAddresses;\\n        uint256[] ids;\\n        uint256[] tokenAmounts;\\n    }\\n\\n    function capsuleMintTax() external view returns (uint256);\\n\\n    function factory() external view returns (ICapsuleFactory);\\n\\n    function getMintWhitelist() external view returns (address[] memory);\\n\\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\\n\\n    function getWhitelistedCallers() external view returns (address[] memory);\\n\\n    function isMintWhitelisted(address _user) external view returns (bool);\\n\\n    function isWhitelistedCaller(address _caller) external view returns (bool);\\n\\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\\n\\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\\n\\n    function multiERC1155Capsule(\\n        address _capsule,\\n        uint256 _id\\n    ) external view returns (MultiERC1155Capsule memory _data);\\n\\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\\n\\n    function mintSimpleCapsule(address _capsule, string memory _uri, address _receiver) external payable;\\n\\n    function burnSimpleCapsule(address _capsule, uint256 _id, address _burnFrom) external;\\n\\n    function mintSingleERC20Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _amount,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    // @dev Legacy burn function\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\\n\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\n\\n    function mintSingleERC721Capsule(\\n        address _capsule,\\n        address _token,\\n        uint256 _id,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnSingleERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\n\\n    function mintMultiERC20Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\n\\n    function mintMultiERC721Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _ids,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\n\\n    function mintMultiERC1155Capsule(\\n        address _capsule,\\n        address[] memory _tokens,\\n        uint256[] memory _ids,\\n        uint256[] memory _amounts,\\n        string memory _uri,\\n        address _receiver\\n    ) external payable;\\n\\n    function burnMultiERC1155Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\n\\n    // Special permission functions\\n    function addToWhitelist(address _user) external;\\n\\n    function removeFromWhitelist(address _user) external;\\n\\n    function flushTaxAmount() external;\\n\\n    function updateCapsuleMintTax(uint256 _newTax) external;\\n\\n    function updateWhitelistedCallers(address _caller) external;\\n}\\n\",\"keccak256\":\"0xcad23b48a94f9b8acf5176bafb3dca6ae773c149de303e25be702ed1528bf5d9\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.15;\\n\\n/**\\n * @notice Governable interface\\n */\\ninterface IGovernable {\\n    function governor() external view returns (address _governor);\\n\\n    function transferGovernorship(address _proposedGovernor) external;\\n}\\n\",\"keccak256\":\"0x3d05688a9e5209d0d13d248faa8bda13a6fc10ca4a57099dfc99746e93aae3b5\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052670de0b6b3a764000060335560405162002e4b38038062002e4b833981810160405281019062000035919062000193565b6000620000476200012160201b60201c565b905080600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001c5565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015b826200012e565b9050919050565b6200016d816200014e565b81146200017957600080fd5b50565b6000815190506200018d8162000162565b92915050565b600060208284031215620001ac57620001ab62000129565b5b6000620001bc848285016200017c565b91505092915050565b608051612c1d6200022e600039600081816106c30152818161086601528181610a7a01528181610af301528181610bae01528181610c4901528181610d0801528181610e7101528181610f990152818161123f0152818161133f01526117720152612c1d6000f3fe6080604052600436106101355760003560e01c80637641e6f3116100ab578063b6aa515b1161006f578063b6aa515b146103a9578063c86f12d3146103d2578063cae86ac9146103fd578063d3dd5fe014610407578063f3b27bc31461041e578063fce126441461043557610135565b80637641e6f3146102d85780638d5cdc2614610301578063931688cb1461032a5780639d24863014610353578063b2ba4f9c1461037e57610135565b8063150b7a02116100fd578063150b7a02146101ec578063346de50a14610229578063447a9f831461025457806344ea49511461026b578063580320841461029657806363772b31146102c157610135565b806301681a621461013a57806304dad9351461016357806305c427b71461018c5780630c340a24146101b75780631249c58b146101e2575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190611c6f565b61045e565b005b34801561016f57600080fd5b5061018a60048036038101906101859190611c6f565b61062a565b005b34801561019857600080fd5b506101a161074f565b6040516101ae9190611cfb565b60405180910390f35b3480156101c357600080fd5b506101cc610767565b6040516101d99190611d25565b60405180910390f35b6101ea61078d565b005b3480156101f857600080fd5b50610213600480360381019061020e9190611ddb565b61091b565b6040516102209190611e9e565b60405180910390f35b34801561023557600080fd5b5061023e610930565b60405161024b9190611ed4565b60405180910390f35b34801561026057600080fd5b50610269610943565b005b34801561027757600080fd5b50610280610aeb565b60405161028d9190611efe565b60405180910390f35b3480156102a257600080fd5b506102ab610af1565b6040516102b89190611f3a565b60405180910390f35b3480156102cd57600080fd5b506102d6610b15565b005b3480156102e457600080fd5b506102ff60048036038101906102fa9190612096565b610c3b565b005b34801561030d57600080fd5b50610328600480360381019061032391906120f2565b610dd8565b005b34801561033657600080fd5b50610351600480360381019061034c9190612132565b610f00565b005b34801561035f57600080fd5b50610368611025565b6040516103759190612197565b60405180910390f35b34801561038a57600080fd5b5061039361102a565b6040516103a091906121d3565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb9190611c6f565b611042565b005b3480156103de57600080fd5b506103e761118c565b6040516103f49190612197565b60405180910390f35b610405611191565b005b34801561041357600080fd5b5061041c6113f4565b005b34801561042a57600080fd5b506104336114fd565b005b34801561044157600080fd5b5061045c60048036038101906104579190611c6f565b6116d9565b005b6104666117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec9061224b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361055a57610555600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611806565b610627565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105959190611d25565b602060405180830381865afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190612280565b9050610625600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166118fa9092919063ffffffff16565b505b50565b6106326117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b89061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b815260040161071a9190611d25565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603460009054906101000a900460ff166107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d3906122f9565b60405180910390fd5b6033543414610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790612365565b60405180910390fd5b600061082a6117fe565b905073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e466038d7ea4c680007f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b81526004016108a39291906123ab565b6000604051808303818588803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b600063150b7a0260e01b905095945050505050565b603460009054906101000a900460ff1681565b61094b6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d19061224b565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190612425565b73ffffffffffffffffffffffffffffffffffffffff166377394a0b7f0000000000000000000000000000000000000000000000000000000000000000306040518363ffffffff1660e01b8152600401610ab7929190612452565b600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b50505050565b60335481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610b1d6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba39061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323249fd96101006040518263ffffffff1660e01b8152600401610c0791906124b6565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050565b6000610c456117fe565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230866040518463ffffffff1660e01b8152600401610ca4939291906124d1565b600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663aee6a2fe7f000000000000000000000000000000000000000000000000000000000000000085306040518463ffffffff1660e01b8152600401610d4793929190612508565b600060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b5050505081604051610d8791906125b9565b6040518091039020838273ffffffffffffffffffffffffffffffffffffffff167f25371875ba959ab9f2b46353b3767d7e9f16f0c7958f87995f4fd8b490da715460405160405180910390a4505050565b610de06117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e669061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610eca9291906125d0565b600060405180830381600087803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b505050505050565b610f086117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ff09190612632565b600060405180830381600087803b15801561100a57600080fd5b505af115801561101e573d6000803e3d6000fd5b5050505050565b601081565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b61104a6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d09061224b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f906126a0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601081565b600061119b6117fe565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461122d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112249061270c565b60405180910390fd5b60108061123a919061275b565b60ff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190612280565b1061130c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611303906127de565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e4347f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b815260040161137c9291906123ab565b6000604051808303818588803b15801561139557600080fd5b505af11580156113a9573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b6113fc6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461148b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114829061224b565b60405180910390fd5b603460009054906101000a900460ff1615603460006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603460009054906101000a900460ff166040516114f39190611ed4565b60405180910390a1565b6115056117fe565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9061284a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6116e16117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117679061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b81526004016117c99190611d25565b600060405180830381600087803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b5050505050565b600033905090565b80471015611849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611840906128b6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161186f90612904565b60006040518083038185875af1925050503d80600081146118ac576040519150601f19603f3d011682016040523d82523d6000602084013e6118b1565b606091505b50509050806118f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ec9061298b565b60405180910390fd5b505050565b61197b8363a9059cbb60e01b84846040516024016119199291906125d0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611980565b505050565b60006119e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a479092919063ffffffff16565b9050600081511115611a425780806020019051810190611a0291906129d7565b611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3890612a76565b60405180910390fd5b5b505050565b6060611a568484600085611a5f565b90509392505050565b606082471015611aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9b90612b08565b60405180910390fd5b611aad85611b73565b611aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae390612b74565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b159190612bd0565b60006040518083038185875af1925050503d8060008114611b52576040519150601f19603f3d011682016040523d82523d6000602084013e611b57565b606091505b5091509150611b67828286611b96565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611ba657829050611bf6565b600083511115611bb95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed9190612632565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c3c82611c11565b9050919050565b611c4c81611c31565b8114611c5757600080fd5b50565b600081359050611c6981611c43565b92915050565b600060208284031215611c8557611c84611c07565b5b6000611c9384828501611c5a565b91505092915050565b6000819050919050565b6000611cc1611cbc611cb784611c11565b611c9c565b611c11565b9050919050565b6000611cd382611ca6565b9050919050565b6000611ce582611cc8565b9050919050565b611cf581611cda565b82525050565b6000602082019050611d106000830184611cec565b92915050565b611d1f81611c31565b82525050565b6000602082019050611d3a6000830184611d16565b92915050565b6000819050919050565b611d5381611d40565b8114611d5e57600080fd5b50565b600081359050611d7081611d4a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d9b57611d9a611d76565b5b8235905067ffffffffffffffff811115611db857611db7611d7b565b5b602083019150836001820283011115611dd457611dd3611d80565b5b9250929050565b600080600080600060808688031215611df757611df6611c07565b5b6000611e0588828901611c5a565b9550506020611e1688828901611c5a565b9450506040611e2788828901611d61565b935050606086013567ffffffffffffffff811115611e4857611e47611c0c565b5b611e5488828901611d85565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e9881611e63565b82525050565b6000602082019050611eb36000830184611e8f565b92915050565b60008115159050919050565b611ece81611eb9565b82525050565b6000602082019050611ee96000830184611ec5565b92915050565b611ef881611d40565b82525050565b6000602082019050611f136000830184611eef565b92915050565b6000611f2482611cc8565b9050919050565b611f3481611f19565b82525050565b6000602082019050611f4f6000830184611f2b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fa382611f5a565b810181811067ffffffffffffffff82111715611fc257611fc1611f6b565b5b80604052505050565b6000611fd5611bfd565b9050611fe18282611f9a565b919050565b600067ffffffffffffffff82111561200157612000611f6b565b5b61200a82611f5a565b9050602081019050919050565b82818337600083830152505050565b600061203961203484611fe6565b611fcb565b90508281526020810184848401111561205557612054611f55565b5b612060848285612017565b509392505050565b600082601f83011261207d5761207c611d76565b5b813561208d848260208601612026565b91505092915050565b600080604083850312156120ad576120ac611c07565b5b60006120bb85828601611d61565b925050602083013567ffffffffffffffff8111156120dc576120db611c0c565b5b6120e885828601612068565b9150509250929050565b6000806040838503121561210957612108611c07565b5b600061211785828601611c5a565b925050602061212885828601611d61565b9150509250929050565b60006020828403121561214857612147611c07565b5b600082013567ffffffffffffffff81111561216657612165611c0c565b5b61217284828501612068565b91505092915050565b600060ff82169050919050565b6121918161217b565b82525050565b60006020820190506121ac6000830184612188565b92915050565b60006121bd82611cc8565b9050919050565b6121cd816121b2565b82525050565b60006020820190506121e860008301846121c4565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000612235600c836121ee565b9150612240826121ff565b602082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b60008151905061227a81611d4a565b92915050565b60006020828403121561229657612295611c07565b5b60006122a48482850161226b565b91505092915050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b60006122e36013836121ee565b91506122ee826122ad565b602082019050919050565b60006020820190508181036000830152612312816122d6565b9050919050565b7f77726f6e672d6d696e742d6665652d7061696400000000000000000000000000600082015250565b600061234f6013836121ee565b915061235a82612319565b602082019050919050565b6000602082019050818103600083015261237e81612342565b9050919050565b50565b60006123956000836121ee565b91506123a082612385565b600082019050919050565b60006060820190506123c06000830185611d16565b81810360208301526123d181612388565b90506123e06040830184611d16565b9392505050565b60006123f282611c31565b9050919050565b612402816123e7565b811461240d57600080fd5b50565b60008151905061241f816123f9565b92915050565b60006020828403121561243b5761243a611c07565b5b600061244984828501612410565b91505092915050565b60006040820190506124676000830185611d16565b6124746020830184611d16565b9392505050565b6000819050919050565b60006124a061249b6124968461247b565b611c9c565b611d40565b9050919050565b6124b081612485565b82525050565b60006020820190506124cb60008301846124a7565b92915050565b60006060820190506124e66000830186611d16565b6124f36020830185611d16565b6125006040830184611eef565b949350505050565b600060608201905061251d6000830186611d16565b61252a6020830185611eef565b6125376040830184611d16565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015612573578082015181840152602081019050612558565b83811115612582576000848401525b50505050565b60006125938261253f565b61259d818561254a565b93506125ad818560208601612555565b80840191505092915050565b60006125c58284612588565b915081905092915050565b60006040820190506125e56000830185611d16565b6125f26020830184611eef565b9392505050565b60006126048261253f565b61260e81856121ee565b935061261e818560208601612555565b61262781611f5a565b840191505092915050565b6000602082019050818103600083015261264c81846125f9565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061268a6019836121ee565b915061269582612654565b602082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f6e6f742d676f7665726e6f720000000000000000000000000000000000000000600082015250565b60006126f6600c836121ee565b9150612701826126c0565b602082019050919050565b60006020820190508181036000830152612725816126e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127668261217b565b91506127718361217b565b92508260ff038211156127875761278661272c565b5b828201905092915050565b7f676f7665726e6f722d6d696e742d706572696f642d6f76657200000000000000600082015250565b60006127c86019836121ee565b91506127d382612792565b602082019050919050565b600060208201905081810360008301526127f7816127bb565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b60006128346019836121ee565b915061283f826127fe565b602082019050919050565b6000602082019050818103600083015261286381612827565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006128a0601d836121ee565b91506128ab8261286a565b602082019050919050565b600060208201905081810360008301526128cf81612893565b9050919050565b600081905092915050565b60006128ee6000836128d6565b91506128f982612385565b600082019050919050565b600061290f826128e1565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612975603a836121ee565b915061298082612919565b604082019050919050565b600060208201905081810360008301526129a481612968565b9050919050565b6129b481611eb9565b81146129bf57600080fd5b50565b6000815190506129d1816129ab565b92915050565b6000602082840312156129ed576129ec611c07565b5b60006129fb848285016129c2565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a60602a836121ee565b9150612a6b82612a04565b604082019050919050565b60006020820190508181036000830152612a8f81612a53565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612af26026836121ee565b9150612afd82612a96565b604082019050919050565b60006020820190508181036000830152612b2181612ae5565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b5e601d836121ee565b9150612b6982612b28565b602082019050919050565b60006020820190508181036000830152612b8d81612b51565b9050919050565b600081519050919050565b6000612baa82612b94565b612bb481856128d6565b9350612bc4818560208601612555565b80840191505092915050565b6000612bdc8284612b9f565b91508190509291505056fea2646970667358221220bad0bdcf5018a0d9401e1dc2c96e4a891e16f6a693fc83141e0aa5443d32382664736f6c634300080f0033",
  "deployedBytecode": "0x6080604052600436106101355760003560e01c80637641e6f3116100ab578063b6aa515b1161006f578063b6aa515b146103a9578063c86f12d3146103d2578063cae86ac9146103fd578063d3dd5fe014610407578063f3b27bc31461041e578063fce126441461043557610135565b80637641e6f3146102d85780638d5cdc2614610301578063931688cb1461032a5780639d24863014610353578063b2ba4f9c1461037e57610135565b8063150b7a02116100fd578063150b7a02146101ec578063346de50a14610229578063447a9f831461025457806344ea49511461026b578063580320841461029657806363772b31146102c157610135565b806301681a621461013a57806304dad9351461016357806305c427b71461018c5780630c340a24146101b75780631249c58b146101e2575b600080fd5b34801561014657600080fd5b50610161600480360381019061015c9190611c6f565b61045e565b005b34801561016f57600080fd5b5061018a60048036038101906101859190611c6f565b61062a565b005b34801561019857600080fd5b506101a161074f565b6040516101ae9190611cfb565b60405180910390f35b3480156101c357600080fd5b506101cc610767565b6040516101d99190611d25565b60405180910390f35b6101ea61078d565b005b3480156101f857600080fd5b50610213600480360381019061020e9190611ddb565b61091b565b6040516102209190611e9e565b60405180910390f35b34801561023557600080fd5b5061023e610930565b60405161024b9190611ed4565b60405180910390f35b34801561026057600080fd5b50610269610943565b005b34801561027757600080fd5b50610280610aeb565b60405161028d9190611efe565b60405180910390f35b3480156102a257600080fd5b506102ab610af1565b6040516102b89190611f3a565b60405180910390f35b3480156102cd57600080fd5b506102d6610b15565b005b3480156102e457600080fd5b506102ff60048036038101906102fa9190612096565b610c3b565b005b34801561030d57600080fd5b50610328600480360381019061032391906120f2565b610dd8565b005b34801561033657600080fd5b50610351600480360381019061034c9190612132565b610f00565b005b34801561035f57600080fd5b50610368611025565b6040516103759190612197565b60405180910390f35b34801561038a57600080fd5b5061039361102a565b6040516103a091906121d3565b60405180910390f35b3480156103b557600080fd5b506103d060048036038101906103cb9190611c6f565b611042565b005b3480156103de57600080fd5b506103e761118c565b6040516103f49190612197565b60405180910390f35b610405611191565b005b34801561041357600080fd5b5061041c6113f4565b005b34801561042a57600080fd5b506104336114fd565b005b34801561044157600080fd5b5061045c60048036038101906104579190611c6f565b6116d9565b005b6104666117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146104f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ec9061224b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361055a57610555600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1647611806565b610627565b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016105959190611d25565b602060405180830381865afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190612280565b9050610625600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff16828473ffffffffffffffffffffffffffffffffffffffff166118fa9092919063ffffffff16565b505b50565b6106326117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146106c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b89061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b815260040161071a9190611d25565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603460009054906101000a900460ff166107dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d3906122f9565b60405180910390fd5b6033543414610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790612365565b60405180910390fd5b600061082a6117fe565b905073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e466038d7ea4c680007f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b81526004016108a39291906123ab565b6000604051808303818588803b1580156108bc57600080fd5b505af11580156108d0573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b600063150b7a0260e01b905095945050505050565b603460009054906101000a900460ff1681565b61094b6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146109da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d19061224b565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d9190612425565b73ffffffffffffffffffffffffffffffffffffffff166377394a0b7f0000000000000000000000000000000000000000000000000000000000000000306040518363ffffffff1660e01b8152600401610ab7929190612452565b600060405180830381600087803b158015610ad157600080fd5b505af1158015610ae5573d6000803e3d6000fd5b50505050565b60335481565b7f000000000000000000000000000000000000000000000000000000000000000081565b610b1d6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610bac576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ba39061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323249fd96101006040518263ffffffff1660e01b8152600401610c0791906124b6565b600060405180830381600087803b158015610c2157600080fd5b505af1158015610c35573d6000803e3d6000fd5b50505050565b6000610c456117fe565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230866040518463ffffffff1660e01b8152600401610ca4939291906124d1565b600060405180830381600087803b158015610cbe57600080fd5b505af1158015610cd2573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663aee6a2fe7f000000000000000000000000000000000000000000000000000000000000000085306040518463ffffffff1660e01b8152600401610d4793929190612508565b600060405180830381600087803b158015610d6157600080fd5b505af1158015610d75573d6000803e3d6000fd5b5050505081604051610d8791906125b9565b6040518091039020838273ffffffffffffffffffffffffffffffffffffffff167f25371875ba959ab9f2b46353b3767d7e9f16f0c7958f87995f4fd8b490da715460405160405180910390a4505050565b610de06117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e669061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610eca9291906125d0565b600060405180830381600087803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b505050505050565b610f086117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610f97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f8e9061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ff09190612632565b600060405180830381600087803b15801561100a57600080fd5b505af115801561101e573d6000803e3d6000fd5b5050505050565b601081565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b61104a6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146110d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110d09061224b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611148576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113f906126a0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601081565b600061119b6117fe565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461122d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112249061270c565b60405180910390fd5b60108061123a919061275b565b60ff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cc9190612280565b1061130c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611303906127de565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e4347f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b815260040161137c9291906123ab565b6000604051808303818588803b15801561139557600080fd5b505af11580156113a9573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b6113fc6117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461148b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114829061224b565b60405180910390fd5b603460009054906101000a900460ff1615603460006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603460009054906101000a900460ff166040516114f39190611ed4565b60405180910390a1565b6115056117fe565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161158b9061284a565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6116e16117fe565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117679061224b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b81526004016117c99190611d25565b600060405180830381600087803b1580156117e357600080fd5b505af11580156117f7573d6000803e3d6000fd5b5050505050565b600033905090565b80471015611849576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611840906128b6565b60405180910390fd5b60008273ffffffffffffffffffffffffffffffffffffffff168260405161186f90612904565b60006040518083038185875af1925050503d80600081146118ac576040519150601f19603f3d011682016040523d82523d6000602084013e6118b1565b606091505b50509050806118f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ec9061298b565b60405180910390fd5b505050565b61197b8363a9059cbb60e01b84846040516024016119199291906125d0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611980565b505050565b60006119e2826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611a479092919063ffffffff16565b9050600081511115611a425780806020019051810190611a0291906129d7565b611a41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a3890612a76565b60405180910390fd5b5b505050565b6060611a568484600085611a5f565b90509392505050565b606082471015611aa4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9b90612b08565b60405180910390fd5b611aad85611b73565b611aec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ae390612b74565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611b159190612bd0565b60006040518083038185875af1925050503d8060008114611b52576040519150601f19603f3d011682016040523d82523d6000602084013e611b57565b606091505b5091509150611b67828286611b96565b92505050949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60608315611ba657829050611bf6565b600083511115611bb95782518084602001fd5b816040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bed9190612632565b60405180910390fd5b9392505050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c3c82611c11565b9050919050565b611c4c81611c31565b8114611c5757600080fd5b50565b600081359050611c6981611c43565b92915050565b600060208284031215611c8557611c84611c07565b5b6000611c9384828501611c5a565b91505092915050565b6000819050919050565b6000611cc1611cbc611cb784611c11565b611c9c565b611c11565b9050919050565b6000611cd382611ca6565b9050919050565b6000611ce582611cc8565b9050919050565b611cf581611cda565b82525050565b6000602082019050611d106000830184611cec565b92915050565b611d1f81611c31565b82525050565b6000602082019050611d3a6000830184611d16565b92915050565b6000819050919050565b611d5381611d40565b8114611d5e57600080fd5b50565b600081359050611d7081611d4a565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611d9b57611d9a611d76565b5b8235905067ffffffffffffffff811115611db857611db7611d7b565b5b602083019150836001820283011115611dd457611dd3611d80565b5b9250929050565b600080600080600060808688031215611df757611df6611c07565b5b6000611e0588828901611c5a565b9550506020611e1688828901611c5a565b9450506040611e2788828901611d61565b935050606086013567ffffffffffffffff811115611e4857611e47611c0c565b5b611e5488828901611d85565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611e9881611e63565b82525050565b6000602082019050611eb36000830184611e8f565b92915050565b60008115159050919050565b611ece81611eb9565b82525050565b6000602082019050611ee96000830184611ec5565b92915050565b611ef881611d40565b82525050565b6000602082019050611f136000830184611eef565b92915050565b6000611f2482611cc8565b9050919050565b611f3481611f19565b82525050565b6000602082019050611f4f6000830184611f2b565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611fa382611f5a565b810181811067ffffffffffffffff82111715611fc257611fc1611f6b565b5b80604052505050565b6000611fd5611bfd565b9050611fe18282611f9a565b919050565b600067ffffffffffffffff82111561200157612000611f6b565b5b61200a82611f5a565b9050602081019050919050565b82818337600083830152505050565b600061203961203484611fe6565b611fcb565b90508281526020810184848401111561205557612054611f55565b5b612060848285612017565b509392505050565b600082601f83011261207d5761207c611d76565b5b813561208d848260208601612026565b91505092915050565b600080604083850312156120ad576120ac611c07565b5b60006120bb85828601611d61565b925050602083013567ffffffffffffffff8111156120dc576120db611c0c565b5b6120e885828601612068565b9150509250929050565b6000806040838503121561210957612108611c07565b5b600061211785828601611c5a565b925050602061212885828601611d61565b9150509250929050565b60006020828403121561214857612147611c07565b5b600082013567ffffffffffffffff81111561216657612165611c0c565b5b61217284828501612068565b91505092915050565b600060ff82169050919050565b6121918161217b565b82525050565b60006020820190506121ac6000830184612188565b92915050565b60006121bd82611cc8565b9050919050565b6121cd816121b2565b82525050565b60006020820190506121e860008301846121c4565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000612235600c836121ee565b9150612240826121ff565b602082019050919050565b6000602082019050818103600083015261226481612228565b9050919050565b60008151905061227a81611d4a565b92915050565b60006020828403121561229657612295611c07565b5b60006122a48482850161226b565b91505092915050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b60006122e36013836121ee565b91506122ee826122ad565b602082019050919050565b60006020820190508181036000830152612312816122d6565b9050919050565b7f77726f6e672d6d696e742d6665652d7061696400000000000000000000000000600082015250565b600061234f6013836121ee565b915061235a82612319565b602082019050919050565b6000602082019050818103600083015261237e81612342565b9050919050565b50565b60006123956000836121ee565b91506123a082612385565b600082019050919050565b60006060820190506123c06000830185611d16565b81810360208301526123d181612388565b90506123e06040830184611d16565b9392505050565b60006123f282611c31565b9050919050565b612402816123e7565b811461240d57600080fd5b50565b60008151905061241f816123f9565b92915050565b60006020828403121561243b5761243a611c07565b5b600061244984828501612410565b91505092915050565b60006040820190506124676000830185611d16565b6124746020830184611d16565b9392505050565b6000819050919050565b60006124a061249b6124968461247b565b611c9c565b611d40565b9050919050565b6124b081612485565b82525050565b60006020820190506124cb60008301846124a7565b92915050565b60006060820190506124e66000830186611d16565b6124f36020830185611d16565b6125006040830184611eef565b949350505050565b600060608201905061251d6000830186611d16565b61252a6020830185611eef565b6125376040830184611d16565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015612573578082015181840152602081019050612558565b83811115612582576000848401525b50505050565b60006125938261253f565b61259d818561254a565b93506125ad818560208601612555565b80840191505092915050565b60006125c58284612588565b915081905092915050565b60006040820190506125e56000830185611d16565b6125f26020830184611eef565b9392505050565b60006126048261253f565b61260e81856121ee565b935061261e818560208601612555565b61262781611f5a565b840191505092915050565b6000602082019050818103600083015261264c81846125f9565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061268a6019836121ee565b915061269582612654565b602082019050919050565b600060208201905081810360008301526126b98161267d565b9050919050565b7f6e6f742d676f7665726e6f720000000000000000000000000000000000000000600082015250565b60006126f6600c836121ee565b9150612701826126c0565b602082019050919050565b60006020820190508181036000830152612725816126e9565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006127668261217b565b91506127718361217b565b92508260ff038211156127875761278661272c565b5b828201905092915050565b7f676f7665726e6f722d6d696e742d706572696f642d6f76657200000000000000600082015250565b60006127c86019836121ee565b91506127d382612792565b602082019050919050565b600060208201905081810360008301526127f7816127bb565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b60006128346019836121ee565b915061283f826127fe565b602082019050919050565b6000602082019050818103600083015261286381612827565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e6365000000600082015250565b60006128a0601d836121ee565b91506128ab8261286a565b602082019050919050565b600060208201905081810360008301526128cf81612893565b9050919050565b600081905092915050565b60006128ee6000836128d6565b91506128f982612385565b600082019050919050565b600061290f826128e1565b9150819050919050565b7f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260008201527f6563697069656e74206d61792068617665207265766572746564000000000000602082015250565b6000612975603a836121ee565b915061298082612919565b604082019050919050565b600060208201905081810360008301526129a481612968565b9050919050565b6129b481611eb9565b81146129bf57600080fd5b50565b6000815190506129d1816129ab565b92915050565b6000602082840312156129ed576129ec611c07565b5b60006129fb848285016129c2565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b6000612a60602a836121ee565b9150612a6b82612a04565b604082019050919050565b60006020820190508181036000830152612a8f81612a53565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000612af26026836121ee565b9150612afd82612a96565b604082019050919050565b60006020820190508181036000830152612b2181612ae5565b9050919050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000612b5e601d836121ee565b9150612b6982612b28565b602082019050919050565b60006020820190508181036000830152612b8d81612b51565b9050919050565b600081519050919050565b6000612baa82612b94565b612bb481856128d6565b9350612bc4818560208601612555565b80840191505092915050565b6000612bdc8284612b9f565b91508190509291505056fea2646970667358221220bad0bdcf5018a0d9401e1dc2c96e4a891e16f6a693fc83141e0aa5443d32382664736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "burn(uint256,string)": {
        "params": {
          "btcAddress": "the address on Bitcoin which will receive the corresponding OO",
          "id_": "OO id to burn"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "This function enables this contract to receive ERC721 tokens"
      },
      "sweep(address)": {
        "params": {
          "_fromToken": "token address to sweep"
        }
      },
      "transferCollectionOwnership(address)": {
        "params": {
          "newOwner_": "Address of new owner"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor."
      },
      "updateBaseURI(string)": {
        "params": {
          "baseURI_": "New baseURI string"
        }
      },
      "updateMetamaster(address)": {
        "params": {
          "metamaster_": "Address of new metamaster"
        }
      },
      "updateRoyaltyConfig(address,uint256)": {
        "params": {
          "royaltyRate_": "Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%",
          "royaltyReceiver_": "Address of royalty receiver"
        }
      }
    },
    "title": "OrdinaryOranges",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OOMintFee()": {
        "notice": "Mint Fee"
      },
      "TEAM_MINT()": {
        "notice": "Team and giveaway mints"
      },
      "burn(uint256,string)": {
        "notice": "Burn an OO"
      },
      "claimCollectionBurnerRole()": {
        "notice": "Update collection burner. Add self address as collection burner for OO"
      },
      "governorMint()": {
        "notice": "Governor Mint"
      },
      "isMintEnabled()": {
        "notice": "Flag indicating whether the OO mint is enabled."
      },
      "lockCollectionCount()": {
        "notice": "Lock collection at 256 max count"
      },
      "mint()": {
        "notice": "Mint an Ordinary Orange to caller address"
      },
      "sweep(address)": {
        "notice": "sweep given token to governor of strategy"
      },
      "toggleMint()": {
        "notice": "onlyGovernor:: Toggle minting status of the Ordinary Oranges"
      },
      "transferCollectionOwnership(address)": {
        "notice": "onlyGovernor:: Transfer ownership of the Ordinary Oranges collection"
      },
      "updateBaseURI(string)": {
        "notice": "onlyGovernor:: Set the collection baseURI"
      },
      "updateMetamaster(address)": {
        "notice": "onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection"
      },
      "updateRoyaltyConfig(address,uint256)": {
        "notice": "onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 28,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1432,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1434,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1556,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1070,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "OOMintFee",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 1073,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "isMintEnabled",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
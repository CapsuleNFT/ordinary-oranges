{
  "address": "0xde2aA3A3422B64e31e0d39fbe8d9095F386B1089",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_capsuleCollection",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "mintStatus",
          "type": "bool"
        }
      ],
      "name": "MintToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "OrdinaryOrangeBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "OrdinaryOrangeMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousGovernor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "proposedGovernor",
          "type": "address"
        }
      ],
      "name": "UpdatedGovernor",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CAPSULE_FACTORY",
      "outputs": [
        {
          "internalType": "contract ICapsuleFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CAPSULE_MINTER",
      "outputs": [
        {
          "internalType": "contract ICapsuleMinter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "GIVEAWAY_MINT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OOMintFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_MINT",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "btcAddress",
          "type": "string"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "capsuleCollection",
      "outputs": [
        {
          "internalType": "contract ICapsule",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimCollectionBurnerRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governorMint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isMintEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "toggleMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner_",
          "type": "address"
        }
      ],
      "name": "transferCollectionOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_proposedGovernor",
          "type": "address"
        }
      ],
      "name": "transferGovernorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "updateBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "metamaster_",
          "type": "address"
        }
      ],
      "name": "updateMetamaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "royaltyReceiver_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyRate_",
          "type": "uint256"
        }
      ],
      "name": "updateRoyaltyConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9d49f791c6f6d409f7c87e306e30f00f1dc6a21ad76d2b698b32a2cd352b639",
  "receipt": {
    "to": null,
    "from": "0xB58992cfA9B39A2FFA0dd286248503A2eFbc65Db",
    "contractAddress": "0xde2aA3A3422B64e31e0d39fbe8d9095F386B1089",
    "transactionIndex": 34,
    "gasUsed": "1923380",
    "logsBloom": "0x
    "blockHash": "0x7d1fe29b29b78087313b515bfb3e4dac437a5c51d014318c0021ab6dd6b2a51a",
    "transactionHash": "0xc9d49f791c6f6d409f7c87e306e30f00f1dc6a21ad76d2b698b32a2cd352b639",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 16610290,
        "transactionHash": "0xc9d49f791c6f6d409f7c87e306e30f00f1dc6a21ad76d2b698b32a2cd352b639",
        "address": "0xde2aA3A3422B64e31e0d39fbe8d9095F386B1089",
        "topics": [
          "0xd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000b58992cfa9b39a2ffa0dd286248503a2efbc65db"
        ],
        "data": "0x",
        "logIndex": 66,
        "blockHash": "0x7d1fe29b29b78087313b515bfb3e4dac437a5c51d014318c0021ab6dd6b2a51a"
      }
    ],
    "blockNumber": 16610290,
    "cumulativeGasUsed": "4823055",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1b41F57D52FE6dB3a63bceB4E8845c0F9F31f859"
  ],
  "numDeployments": 1,
  "solcInputHash": "532df4bc8cdfd44b16d9414589ac0429",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_capsuleCollection\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"mintStatus\",\"type\":\"bool\"}],\"name\":\"MintToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"OrdinaryOrangeBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"OrdinaryOrangeMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousGovernor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"proposedGovernor\",\"type\":\"address\"}],\"name\":\"UpdatedGovernor\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CAPSULE_FACTORY\",\"outputs\":[{\"internalType\":\"contract ICapsuleFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CAPSULE_MINTER\",\"outputs\":[{\"internalType\":\"contract ICapsuleMinter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"GIVEAWAY_MINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OOMintFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MINT\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"btcAddress\",\"type\":\"string\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"capsuleCollection\",\"outputs\":[{\"internalType\":\"contract ICapsule\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimCollectionBurnerRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governorMint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isMintEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"toggleMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner_\",\"type\":\"address\"}],\"name\":\"transferCollectionOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_proposedGovernor\",\"type\":\"address\"}],\"name\":\"transferGovernorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"updateBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"metamaster_\",\"type\":\"address\"}],\"name\":\"updateMetamaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"royaltyReceiver_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyRate_\",\"type\":\"uint256\"}],\"name\":\"updateRoyaltyConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"acceptGovernorship()\":{\"details\":\"Allows new governor to accept governorship of the contract.\"},\"burn(uint256,string)\":{\"params\":{\"btcAddress\":\"the address on Bitcoin which will recieve the corresponding OO\",\"id_\":\"OO id to burn\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"This function enables this contract to receive ERC721 tokens\"},\"transferCollectionOwnership(address)\":{\"params\":{\"newOwner_\":\"Address of new owner\"}},\"transferGovernorship(address)\":{\"details\":\"Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor.\"},\"updateBaseURI(string)\":{\"params\":{\"baseURI_\":\"New baseURI string\"}},\"updateMetamaster(address)\":{\"params\":{\"metamaster_\":\"Address of new metamaster\"}},\"updateRoyaltyConfig(address,uint256)\":{\"params\":{\"royaltyRate_\":\"Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\",\"royaltyReceiver_\":\"Address of royalty receiver\"}}},\"title\":\"OrdinaryOranges\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OOMintFee()\":{\"notice\":\"Mint Fee\"},\"TEAM_MINT()\":{\"notice\":\"Team and giveaway mints\"},\"burn(uint256,string)\":{\"notice\":\"Burn an OO\"},\"claimCollectionBurnerRole()\":{\"notice\":\"Update collection burner. Add self address as collection burner for OO\"},\"governorMint()\":{\"notice\":\"Governor Mint\"},\"isMintEnabled()\":{\"notice\":\"Flag indicating whether the OO mint is enabled.\"},\"mint()\":{\"notice\":\"Mint an Ordinary Orange to caller address\"},\"toggleMint()\":{\"notice\":\"onlyGovernor:: Toggle minting status of the Ordinary Oranges\"},\"transferCollectionOwnership(address)\":{\"notice\":\"onlyGovernor:: Transfer ownership of the Ordinary Oranges collection\"},\"updateBaseURI(string)\":{\"notice\":\"onlyGovernor:: Set the collection baseURI\"},\"updateMetamaster(address)\":{\"notice\":\"onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection\"},\"updateRoyaltyConfig(address,uint256)\":{\"notice\":\"onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/OrdinaryOranges.sol\":\"OrdinaryOranges\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard.\\n *\\n * A standardized way to retrieve royalty payment information for non-fungible tokens (NFTs) to enable universal\\n * support for royalty payments across all NFT marketplaces and ecosystem participants.\\n *\\n * _Available since v4.5._\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Returns how much royalty is owed and to whom, based on a sale price that may be denominated in any unit of\\n     * exchange. The royalty amount is denominated and should be paid in that same unit of exchange.\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0xa812eed728198acd2c30d06950a5bea8d68436e4f694dd892273266ec2f79f5b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2a21b14ff90012878752f230d3ffd5c3405e5938d06c97a7d89c0a64561d0d66\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/OrdinaryOranges.sol\":{\"content\":\"// SPDX-License-Identifier: GPLv3\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"./access/Governable.sol\\\";\\r\\nimport \\\"./interfaces/ICapsule.sol\\\";\\r\\nimport \\\"./interfaces/ICapsuleMinter.sol\\\";\\r\\n\\r\\n/// @title OrdinaryOranges\\r\\ncontract OrdinaryOranges is Governable, IERC721Receiver {\\r\\n\\r\\n    ICapsuleFactory public constant CAPSULE_FACTORY = ICapsuleFactory(0x4Ced59c19F1f3a9EeBD670f746B737ACf504d1eB);\\r\\n    ICapsuleMinter public constant CAPSULE_MINTER = ICapsuleMinter(0xb8Cf4A28DA322598FDB78a1406a61B72d6F6b396);\\r\\n    ICapsule public immutable capsuleCollection;\\r\\n\\r\\n    /// @notice Team and giveaway mints\\r\\n    uint8 public constant TEAM_MINT = 16;\\r\\n    uint8 public constant GIVEAWAY_MINT = 16;\\r\\n\\r\\n    /// @notice Mint Fee\\r\\n    uint256 public OOMintFee = 1 ether;\\r\\n\\r\\n    /// @notice Flag indicating whether the OO mint is enabled.\\r\\n    bool public isMintEnabled;\\r\\n    \\r\\n    event OrdinaryOrangeMinted(address indexed user);\\r\\n    event OrdinaryOrangeBurnt(address indexed user, uint256 indexed id, string indexed btcAddress);\\r\\n    event MintToggled(bool mintStatus);\\r\\n\\r\\n    constructor(address _capsuleCollection) payable {\\r\\n        capsuleCollection = ICapsule(_capsuleCollection);\\r\\n    }\\r\\n\\r\\n    /// @notice Governor Mint\\r\\n    function governorMint() external payable {\\r\\n        address _caller = _msgSender();\\r\\n\\r\\n        require(_caller == governor, \\\"not-governor\\\");\\r\\n        require(capsuleCollection.counter() < TEAM_MINT + GIVEAWAY_MINT, \\\"governor-mint-period-over\\\");\\r\\n\\r\\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\\r\\n        // Hence passing empty token URI to mint function below.\\r\\n        CAPSULE_MINTER.mintSimpleCapsule{value: msg.value}(\\r\\n            address(capsuleCollection),\\r\\n            \\\"\\\",\\r\\n            _caller\\r\\n        );\\r\\n\\r\\n        emit OrdinaryOrangeMinted(_caller);\\r\\n    }\\r\\n\\r\\n\\r\\n    /// @notice Mint an Ordinary Orange to caller address\\r\\n    function mint() external payable {\\r\\n        require(isMintEnabled, \\\"mint-is-not-enabled\\\");\\r\\n        require(msg.value == OOMintFee, \\\"wrong-mint-fee-paid\\\");\\r\\n        \\r\\n        address _caller = _msgSender();\\r\\n\\r\\n        // Ordinary Orange collection will be using baseURL and will not need URI for individual NFTs.\\r\\n        // Hence passing empty token URI to mint function below.\\r\\n        CAPSULE_MINTER.mintSimpleCapsule{value: 0.001 ether}(\\r\\n            address(capsuleCollection),\\r\\n            \\\"\\\",\\r\\n            _caller\\r\\n        );\\r\\n        emit OrdinaryOrangeMinted(_caller);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Burn an OO\\r\\n     * @param id_ OO id to burn\\r\\n     * @param btcAddress the address on Bitcoin which will recieve the corresponding OO\\r\\n     */\\r\\n    function burn(uint256 id_, string memory btcAddress) external {\\r\\n        address _caller = _msgSender();\\r\\n        // Transfer OO to contract\\r\\n        capsuleCollection.safeTransferFrom(_caller, address(this), id_);\\r\\n        // Burn OO\\r\\n        CAPSULE_MINTER.burnSimpleCapsule(address(capsuleCollection), id_, address(this));\\r\\n        emit OrdinaryOrangeBurnt(_caller, id_, btcAddress);\\r\\n    }\\r\\n\\r\\n    /// @dev This function enables this contract to receive ERC721 tokens\\r\\n    function onERC721Received(address, address, uint256, bytes calldata) external pure returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    /******************************************************************************\\r\\n     *                            Governor functions                              *\\r\\n     *****************************************************************************/\\r\\n    /// @notice onlyGovernor:: Toggle minting status of the Ordinary Oranges\\r\\n    function toggleMint() external onlyGovernor {\\r\\n        isMintEnabled = !isMintEnabled;\\r\\n        emit MintToggled(isMintEnabled);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice onlyGovernor:: Transfer ownership of the Ordinary Oranges collection\\r\\n     * @param newOwner_ Address of new owner\\r\\n     */\\r\\n    function transferCollectionOwnership(address newOwner_) external onlyGovernor {\\r\\n        capsuleCollection.transferOwnership(newOwner_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice onlyGovernor:: Set the collection baseURI\\r\\n     * @param baseURI_ New baseURI string\\r\\n     */\\r\\n    function updateBaseURI(string memory baseURI_) public onlyGovernor {\\r\\n        capsuleCollection.setBaseURI(baseURI_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice Update collection burner. Add self address as collection burner for OO\\r\\n     */\\r\\n    function claimCollectionBurnerRole() external onlyGovernor {\\r\\n        CAPSULE_MINTER.factory().updateCapsuleCollectionBurner(address(capsuleCollection), address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection\\r\\n     * @param metamaster_ Address of new metamaster\\r\\n     */\\r\\n    function updateMetamaster(address metamaster_) external onlyGovernor {\\r\\n        capsuleCollection.updateTokenURIOwner(metamaster_);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @notice onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection\\r\\n     * @param royaltyReceiver_ Address of royalty receiver\\r\\n     * @param royaltyRate_ Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%\\r\\n     */\\r\\n    function updateRoyaltyConfig(address royaltyReceiver_, uint256 royaltyRate_) external onlyGovernor {\\r\\n        capsuleCollection.updateRoyaltyConfig(royaltyReceiver_, royaltyRate_);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x0a9e82fd7eba879b45d72d97b29eb33e69aa382c8f0817c4162dcf4dd3665507\",\"license\":\"GPLv3\"},\"contracts/access/Governable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\r\\nimport \\\"../interfaces/IGovernable.sol\\\";\\r\\n\\r\\n/**\\r\\n * @dev Contract module which provides a basic access control mechanism, where\\r\\n * there is an account (governor) that can be granted exclusive access to\\r\\n * specific functions.\\r\\n *\\r\\n * By default, the governor account will be the one that deploys the contract. This\\r\\n * can later be changed with {transferGovernorship}.\\r\\n *\\r\\n */\\r\\nabstract contract Governable is IGovernable, Context, Initializable {\\r\\n    address public governor;\\r\\n    address private proposedGovernor;\\r\\n\\r\\n    event UpdatedGovernor(address indexed previousGovernor, address indexed proposedGovernor);\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\r\\n     */\\r\\n    constructor() {\\r\\n        address msgSender = _msgSender();\\r\\n        governor = msgSender;\\r\\n        emit UpdatedGovernor(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Initializes the contract setting the deployer as the initial governor.\\r\\n     */\\r\\n    // solhint-disable-next-line func-name-mixedcase\\r\\n    function __Governable_init() internal onlyInitializing {\\r\\n        address msgSender = _msgSender();\\r\\n        governor = msgSender;\\r\\n        emit UpdatedGovernor(address(0), msgSender);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws if called by any account other than the governor.\\r\\n     */\\r\\n    modifier onlyGovernor() {\\r\\n        require(governor == _msgSender(), \\\"not governor\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers governorship of the contract to a new account (`proposedGovernor`).\\r\\n     * Can only be called by the current governor.\\r\\n     */\\r\\n    function transferGovernorship(address _proposedGovernor) external onlyGovernor {\\r\\n        require(_proposedGovernor != address(0), \\\"invalid proposed governor\\\");\\r\\n        proposedGovernor = _proposedGovernor;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Allows new governor to accept governorship of the contract.\\r\\n     */\\r\\n    function acceptGovernorship() external {\\r\\n        require(proposedGovernor == _msgSender(), \\\"not the proposed governor\\\");\\r\\n        emit UpdatedGovernor(governor, proposedGovernor);\\r\\n        governor = proposedGovernor;\\r\\n        proposedGovernor = address(0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\r\\n     * variables without shifting down storage in the inheritance chain.\\r\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\r\\n     */\\r\\n    uint256[49] private __gap;\\r\\n}\\r\\n\",\"keccak256\":\"0x693397b5b7b56349bf74a5cc09a5a09e0d7ecb297f25fab83a90723fc7e3b586\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsule.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\r\\n\\r\\ninterface ICapsule is IERC721, IERC2981 {\\r\\n    function mint(address account, string memory _uri) external;\\r\\n\\r\\n    function burn(address owner, uint256 tokenId) external;\\r\\n\\r\\n    function setMetadataProvider(address _metadataAddress) external;\\r\\n\\r\\n    // Read functions\\r\\n    function baseURI() external view returns (string memory);\\r\\n\\r\\n    function counter() external view returns (uint256);\\r\\n\\r\\n    function exists(uint256 tokenId) external view returns (bool);\\r\\n\\r\\n    function isCollectionMinter(address _account) external view returns (bool);\\r\\n\\r\\n    function isCollectionPrivate() external view returns (bool);\\r\\n\\r\\n    function maxId() external view returns (uint256);\\r\\n\\r\\n    function royaltyRate() external view returns (uint256);\\r\\n\\r\\n    function royaltyReceiver() external view returns (address);\\r\\n\\r\\n    function tokenURIOwner() external view returns (address);\\r\\n\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    //     Extra functions compare to original ICapsule interface    ///////////\\r\\n    ////////////////////////////////////////////////////////////////////////////\\r\\n    // Read functions\\r\\n    function owner() external view returns (address);\\r\\n\\r\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\r\\n\\r\\n    // Admin functions\\r\\n    function lockCollectionCount(uint256 _nftCount) external;\\r\\n\\r\\n    function setBaseURI(string calldata baseURI_) external;\\r\\n\\r\\n    function setTokenURI(uint256 _tokenId, string memory _newTokenURI) external;\\r\\n\\r\\n    function transferOwnership(address _newOwner) external;\\r\\n\\r\\n    function updateTokenURIOwner(address _newTokenURIOwner) external;\\r\\n\\r\\n    function updateRoyaltyConfig(address _royaltyReceiver, uint256 _royaltyRate) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x647cee90f12f367164da09a3b22543d673badf87274f842f3832dd7dd531df75\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IGovernable.sol\\\";\\r\\n\\r\\ninterface ICapsuleFactory is IGovernable {\\r\\n    function capsuleCollectionTax() external view returns (uint256);\\r\\n\\r\\n    function capsuleMinter() external view returns (address);\\r\\n\\r\\n    function createCapsuleCollection(\\r\\n        string memory _name,\\r\\n        string memory _symbol,\\r\\n        address _tokenURIOwner,\\r\\n        bool _isCollectionPrivate\\r\\n    ) external payable returns (address);\\r\\n\\r\\n    function collectionBurner(address _capsule) external view returns (address);\\r\\n\\r\\n    function getAllCapsuleCollections() external view returns (address[] memory);\\r\\n\\r\\n    function getCapsuleCollectionsOf(address _owner) external view returns (address[] memory);\\r\\n\\r\\n    function getBlacklist() external view returns (address[] memory);\\r\\n\\r\\n    function getWhitelist() external view returns (address[] memory);\\r\\n\\r\\n    function isBlacklisted(address _user) external view returns (bool);\\r\\n\\r\\n    function isCapsule(address _capsule) external view returns (bool);\\r\\n\\r\\n    function isCollectionBurner(address _capsuleCollection, address _account) external view returns (bool);\\r\\n\\r\\n    function isWhitelisted(address _user) external view returns (bool);\\r\\n\\r\\n    function taxCollector() external view returns (address);\\r\\n\\r\\n    //solhint-disable-next-line func-name-mixedcase\\r\\n    function VERSION() external view returns (string memory);\\r\\n\\r\\n    // Special permission functions\\r\\n    function addToWhitelist(address _user) external;\\r\\n\\r\\n    function removeFromWhitelist(address _user) external;\\r\\n\\r\\n    function addToBlacklist(address _user) external;\\r\\n\\r\\n    function removeFromBlacklist(address _user) external;\\r\\n\\r\\n    function flushTaxAmount() external;\\r\\n\\r\\n    function setCapsuleMinter(address _newCapsuleMinter) external;\\r\\n\\r\\n    function updateCapsuleCollectionBurner(address _capsuleCollection, address _newBurner) external;\\r\\n\\r\\n    function updateCapsuleCollectionOwner(address _previousOwner, address _newOwner) external;\\r\\n\\r\\n    function updateCapsuleCollectionTax(uint256 _newTax) external;\\r\\n\\r\\n    function updateTaxCollector(address _newTaxCollector) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x59ad2a005447e4c4830d7e81a1e0b8f908a86c7985b2a1bc0e262d50c99c1d14\",\"license\":\"MIT\"},\"contracts/interfaces/ICapsuleMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\nimport \\\"./IGovernable.sol\\\";\\r\\nimport \\\"./ICapsuleFactory.sol\\\";\\r\\n\\r\\ninterface ICapsuleMinter is IGovernable {\\r\\n    struct SingleERC20Capsule {\\r\\n        address tokenAddress;\\r\\n        uint256 tokenAmount;\\r\\n    }\\r\\n\\r\\n    struct MultiERC20Capsule {\\r\\n        address[] tokenAddresses;\\r\\n        uint256[] tokenAmounts;\\r\\n    }\\r\\n\\r\\n    struct SingleERC721Capsule {\\r\\n        address tokenAddress;\\r\\n        uint256 id;\\r\\n    }\\r\\n\\r\\n    struct MultiERC721Capsule {\\r\\n        address[] tokenAddresses;\\r\\n        uint256[] ids;\\r\\n    }\\r\\n\\r\\n    struct MultiERC1155Capsule {\\r\\n        address[] tokenAddresses;\\r\\n        uint256[] ids;\\r\\n        uint256[] tokenAmounts;\\r\\n    }\\r\\n\\r\\n    function capsuleMintTax() external view returns (uint256);\\r\\n\\r\\n    function factory() external view returns (ICapsuleFactory);\\r\\n\\r\\n    function getMintWhitelist() external view returns (address[] memory);\\r\\n\\r\\n    function getCapsuleOwner(address _capsule, uint256 _id) external view returns (address);\\r\\n\\r\\n    function getWhitelistedCallers() external view returns (address[] memory);\\r\\n\\r\\n    function isMintWhitelisted(address _user) external view returns (bool);\\r\\n\\r\\n    function isWhitelistedCaller(address _caller) external view returns (bool);\\r\\n\\r\\n    function multiERC20Capsule(address _capsule, uint256 _id) external view returns (MultiERC20Capsule memory _data);\\r\\n\\r\\n    function multiERC721Capsule(address _capsule, uint256 _id) external view returns (MultiERC721Capsule memory _data);\\r\\n\\r\\n    function multiERC1155Capsule(\\r\\n        address _capsule,\\r\\n        uint256 _id\\r\\n    ) external view returns (MultiERC1155Capsule memory _data);\\r\\n\\r\\n    function singleERC20Capsule(address _capsule, uint256 _id) external view returns (address _token, uint256 _amount);\\r\\n\\r\\n    function mintSimpleCapsule(address _capsule, string memory _uri, address _receiver) external payable;\\r\\n\\r\\n    function burnSimpleCapsule(address _capsule, uint256 _id, address _burnFrom) external;\\r\\n\\r\\n    function mintSingleERC20Capsule(\\r\\n        address _capsule,\\r\\n        address _token,\\r\\n        uint256 _amount,\\r\\n        string memory _uri,\\r\\n        address _receiver\\r\\n    ) external payable;\\r\\n\\r\\n    // @dev Legacy burn function\\r\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id) external;\\r\\n\\r\\n    function burnSingleERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\r\\n\\r\\n    function mintSingleERC721Capsule(\\r\\n        address _capsule,\\r\\n        address _token,\\r\\n        uint256 _id,\\r\\n        string memory _uri,\\r\\n        address _receiver\\r\\n    ) external payable;\\r\\n\\r\\n    function burnSingleERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\r\\n\\r\\n    function mintMultiERC20Capsule(\\r\\n        address _capsule,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _amounts,\\r\\n        string memory _uri,\\r\\n        address _receiver\\r\\n    ) external payable;\\r\\n\\r\\n    function burnMultiERC20Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\r\\n\\r\\n    function mintMultiERC721Capsule(\\r\\n        address _capsule,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _ids,\\r\\n        string memory _uri,\\r\\n        address _receiver\\r\\n    ) external payable;\\r\\n\\r\\n    function burnMultiERC721Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\r\\n\\r\\n    function mintMultiERC1155Capsule(\\r\\n        address _capsule,\\r\\n        address[] memory _tokens,\\r\\n        uint256[] memory _ids,\\r\\n        uint256[] memory _amounts,\\r\\n        string memory _uri,\\r\\n        address _receiver\\r\\n    ) external payable;\\r\\n\\r\\n    function burnMultiERC1155Capsule(address _capsule, uint256 _id, address _burnFrom, address _receiver) external;\\r\\n\\r\\n    // Special permission functions\\r\\n    function addToWhitelist(address _user) external;\\r\\n\\r\\n    function removeFromWhitelist(address _user) external;\\r\\n\\r\\n    function flushTaxAmount() external;\\r\\n\\r\\n    function updateCapsuleMintTax(uint256 _newTax) external;\\r\\n\\r\\n    function updateWhitelistedCallers(address _caller) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xe157c84b2a30ce7c75b75f36bd3d6583c35647c9988a527c69503bd0e38d673f\",\"license\":\"MIT\"},\"contracts/interfaces/IGovernable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.15;\\r\\n\\r\\n/**\\r\\n * @notice Governable interface\\r\\n */\\r\\ninterface IGovernable {\\r\\n    function governor() external view returns (address _governor);\\r\\n\\r\\n    function transferGovernorship(address _proposedGovernor) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x9602fe16abe438e90cd543ab5e803415490af193b65a2717010c9d916909cbe6\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a0604052670de0b6b3a76400006033556040516200233238038062002332833981810160405281019062000035919062000193565b6000620000476200012160201b60201c565b905080600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050620001c5565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015b826200012e565b9050919050565b6200016d816200014e565b81146200017957600080fd5b50565b6000815190506200018d8162000162565b92915050565b600060208284031215620001ac57620001ab62000129565b5b6000620001bc848285016200017c565b91505092915050565b60805161210b62000227600039600081816104a10152818161064401528181610858015281816108d101528181610901015281816109c001528181610b2901528181610c5101528181610ef701528181610ff7015261142a015261210b6000f3fe60806040526004361061011f5760003560e01c80638d5cdc26116100a0578063c86f12d311610064578063c86f12d31461037c578063cae86ac9146103a7578063d3dd5fe0146103b1578063f3b27bc3146103c8578063fce12644146103df5761011f565b80638d5cdc26146102ab578063931688cb146102d45780639d248630146102fd578063b2ba4f9c14610328578063b6aa515b146103535761011f565b8063346de50a116100e7578063346de50a146101ea578063447a9f831461021557806344ea49511461022c57806358032084146102575780637641e6f3146102825761011f565b806304dad9351461012457806305c427b71461014d5780630c340a24146101785780631249c58b146101a3578063150b7a02146101ad575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611530565b610408565b005b34801561015957600080fd5b5061016261052d565b60405161016f91906115bc565b60405180910390f35b34801561018457600080fd5b5061018d610545565b60405161019a91906115e6565b60405180910390f35b6101ab61056b565b005b3480156101b957600080fd5b506101d460048036038101906101cf919061169c565b6106f9565b6040516101e1919061175f565b60405180910390f35b3480156101f657600080fd5b506101ff61070e565b60405161020c9190611795565b60405180910390f35b34801561022157600080fd5b5061022a610721565b005b34801561023857600080fd5b506102416108c9565b60405161024e91906117bf565b60405180910390f35b34801561026357600080fd5b5061026c6108cf565b60405161027991906117fb565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190611957565b6108f3565b005b3480156102b757600080fd5b506102d260048036038101906102cd91906119b3565b610a90565b005b3480156102e057600080fd5b506102fb60048036038101906102f691906119f3565b610bb8565b005b34801561030957600080fd5b50610312610cdd565b60405161031f9190611a58565b60405180910390f35b34801561033457600080fd5b5061033d610ce2565b60405161034a9190611a94565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190611530565b610cfa565b005b34801561038857600080fd5b50610391610e44565b60405161039e9190611a58565b60405180910390f35b6103af610e49565b005b3480156103bd57600080fd5b506103c66110ac565b005b3480156103d457600080fd5b506103dd6111b5565b005b3480156103eb57600080fd5b5061040660048036038101906104019190611530565b611391565b005b6104106114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049690611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016104f891906115e6565b600060405180830381600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603460009054906101000a900460ff166105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190611b78565b60405180910390fd5b60335434146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611be4565b60405180910390fd5b60006106086114b6565b905073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e466038d7ea4c680007f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610681929190611c2a565b6000604051808303818588803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b600063150b7a0260e01b905095945050505050565b603460009054906101000a900460ff1681565b6107296114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af90611b0c565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611ca4565b73ffffffffffffffffffffffffffffffffffffffff166377394a0b7f0000000000000000000000000000000000000000000000000000000000000000306040518363ffffffff1660e01b8152600401610895929190611cd1565b600060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b50505050565b60335481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108fd6114b6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230866040518463ffffffff1660e01b815260040161095c93929190611cfa565b600060405180830381600087803b15801561097657600080fd5b505af115801561098a573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663aee6a2fe7f000000000000000000000000000000000000000000000000000000000000000085306040518463ffffffff1660e01b81526004016109ff93929190611d31565b600060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b5050505081604051610a3f9190611de2565b6040518091039020838273ffffffffffffffffffffffffffffffffffffffff167f25371875ba959ab9f2b46353b3767d7e9f16f0c7958f87995f4fd8b490da715460405160405180910390a4505050565b610a986114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610b82929190611df9565b600060405180830381600087803b158015610b9c57600080fd5b505af1158015610bb0573d6000803e3d6000fd5b505050505050565b610bc06114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4690611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ca89190611e5b565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b5050505050565b601081565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b610d026114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890611b0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df790611ec9565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601081565b6000610e536114b6565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611f35565b60405180910390fd5b601080610ef29190611f84565b60ff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611fd0565b10610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb90612049565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e4347f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401611034929190611c2a565b6000604051808303818588803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b6110b46114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90611b0c565b60405180910390fd5b603460009054906101000a900460ff1615603460006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603460009054906101000a900460ff166040516111ab9190611795565b60405180910390a1565b6111bd6114b6565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461124c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611243906120b5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6113996114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b815260040161148191906115e6565b600060405180830381600087803b15801561149b57600080fd5b505af11580156114af573d6000803e3d6000fd5b5050505050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114fd826114d2565b9050919050565b61150d816114f2565b811461151857600080fd5b50565b60008135905061152a81611504565b92915050565b600060208284031215611546576115456114c8565b5b60006115548482850161151b565b91505092915050565b6000819050919050565b600061158261157d611578846114d2565b61155d565b6114d2565b9050919050565b600061159482611567565b9050919050565b60006115a682611589565b9050919050565b6115b68161159b565b82525050565b60006020820190506115d160008301846115ad565b92915050565b6115e0816114f2565b82525050565b60006020820190506115fb60008301846115d7565b92915050565b6000819050919050565b61161481611601565b811461161f57600080fd5b50565b6000813590506116318161160b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261165c5761165b611637565b5b8235905067ffffffffffffffff8111156116795761167861163c565b5b60208301915083600182028301111561169557611694611641565b5b9250929050565b6000806000806000608086880312156116b8576116b76114c8565b5b60006116c68882890161151b565b95505060206116d78882890161151b565b94505060406116e888828901611622565b935050606086013567ffffffffffffffff811115611709576117086114cd565b5b61171588828901611646565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61175981611724565b82525050565b60006020820190506117746000830184611750565b92915050565b60008115159050919050565b61178f8161177a565b82525050565b60006020820190506117aa6000830184611786565b92915050565b6117b981611601565b82525050565b60006020820190506117d460008301846117b0565b92915050565b60006117e582611589565b9050919050565b6117f5816117da565b82525050565b600060208201905061181060008301846117ec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118648261181b565b810181811067ffffffffffffffff821117156118835761188261182c565b5b80604052505050565b60006118966114be565b90506118a2828261185b565b919050565b600067ffffffffffffffff8211156118c2576118c161182c565b5b6118cb8261181b565b9050602081019050919050565b82818337600083830152505050565b60006118fa6118f5846118a7565b61188c565b90508281526020810184848401111561191657611915611816565b5b6119218482856118d8565b509392505050565b600082601f83011261193e5761193d611637565b5b813561194e8482602086016118e7565b91505092915050565b6000806040838503121561196e5761196d6114c8565b5b600061197c85828601611622565b925050602083013567ffffffffffffffff81111561199d5761199c6114cd565b5b6119a985828601611929565b9150509250929050565b600080604083850312156119ca576119c96114c8565b5b60006119d88582860161151b565b92505060206119e985828601611622565b9150509250929050565b600060208284031215611a0957611a086114c8565b5b600082013567ffffffffffffffff811115611a2757611a266114cd565b5b611a3384828501611929565b91505092915050565b600060ff82169050919050565b611a5281611a3c565b82525050565b6000602082019050611a6d6000830184611a49565b92915050565b6000611a7e82611589565b9050919050565b611a8e81611a73565b82525050565b6000602082019050611aa96000830184611a85565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611af6600c83611aaf565b9150611b0182611ac0565b602082019050919050565b60006020820190508181036000830152611b2581611ae9565b9050919050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b6000611b62601383611aaf565b9150611b6d82611b2c565b602082019050919050565b60006020820190508181036000830152611b9181611b55565b9050919050565b7f77726f6e672d6d696e742d6665652d7061696400000000000000000000000000600082015250565b6000611bce601383611aaf565b9150611bd982611b98565b602082019050919050565b60006020820190508181036000830152611bfd81611bc1565b9050919050565b50565b6000611c14600083611aaf565b9150611c1f82611c04565b600082019050919050565b6000606082019050611c3f60008301856115d7565b8181036020830152611c5081611c07565b9050611c5f60408301846115d7565b9392505050565b6000611c71826114f2565b9050919050565b611c8181611c66565b8114611c8c57600080fd5b50565b600081519050611c9e81611c78565b92915050565b600060208284031215611cba57611cb96114c8565b5b6000611cc884828501611c8f565b91505092915050565b6000604082019050611ce660008301856115d7565b611cf360208301846115d7565b9392505050565b6000606082019050611d0f60008301866115d7565b611d1c60208301856115d7565b611d2960408301846117b0565b949350505050565b6000606082019050611d4660008301866115d7565b611d5360208301856117b0565b611d6060408301846115d7565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015611d9c578082015181840152602081019050611d81565b83811115611dab576000848401525b50505050565b6000611dbc82611d68565b611dc68185611d73565b9350611dd6818560208601611d7e565b80840191505092915050565b6000611dee8284611db1565b915081905092915050565b6000604082019050611e0e60008301856115d7565b611e1b60208301846117b0565b9392505050565b6000611e2d82611d68565b611e378185611aaf565b9350611e47818560208601611d7e565b611e508161181b565b840191505092915050565b60006020820190508181036000830152611e758184611e22565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b6000611eb3601983611aaf565b9150611ebe82611e7d565b602082019050919050565b60006020820190508181036000830152611ee281611ea6565b9050919050565b7f6e6f742d676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611f1f600c83611aaf565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f8f82611a3c565b9150611f9a83611a3c565b92508260ff03821115611fb057611faf611f55565b5b828201905092915050565b600081519050611fca8161160b565b92915050565b600060208284031215611fe657611fe56114c8565b5b6000611ff484828501611fbb565b91505092915050565b7f676f7665726e6f722d6d696e742d706572696f642d6f76657200000000000000600082015250565b6000612033601983611aaf565b915061203e82611ffd565b602082019050919050565b6000602082019050818103600083015261206281612026565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061209f601983611aaf565b91506120aa82612069565b602082019050919050565b600060208201905081810360008301526120ce81612092565b905091905056fea2646970667358221220d7e7ba67096b1daa38ecdaaa6ad7f8b05a0b50d6c9ee561f90603b06661767f864736f6c634300080f0033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c80638d5cdc26116100a0578063c86f12d311610064578063c86f12d31461037c578063cae86ac9146103a7578063d3dd5fe0146103b1578063f3b27bc3146103c8578063fce12644146103df5761011f565b80638d5cdc26146102ab578063931688cb146102d45780639d248630146102fd578063b2ba4f9c14610328578063b6aa515b146103535761011f565b8063346de50a116100e7578063346de50a146101ea578063447a9f831461021557806344ea49511461022c57806358032084146102575780637641e6f3146102825761011f565b806304dad9351461012457806305c427b71461014d5780630c340a24146101785780631249c58b146101a3578063150b7a02146101ad575b600080fd5b34801561013057600080fd5b5061014b60048036038101906101469190611530565b610408565b005b34801561015957600080fd5b5061016261052d565b60405161016f91906115bc565b60405180910390f35b34801561018457600080fd5b5061018d610545565b60405161019a91906115e6565b60405180910390f35b6101ab61056b565b005b3480156101b957600080fd5b506101d460048036038101906101cf919061169c565b6106f9565b6040516101e1919061175f565b60405180910390f35b3480156101f657600080fd5b506101ff61070e565b60405161020c9190611795565b60405180910390f35b34801561022157600080fd5b5061022a610721565b005b34801561023857600080fd5b506102416108c9565b60405161024e91906117bf565b60405180910390f35b34801561026357600080fd5b5061026c6108cf565b60405161027991906117fb565b60405180910390f35b34801561028e57600080fd5b506102a960048036038101906102a49190611957565b6108f3565b005b3480156102b757600080fd5b506102d260048036038101906102cd91906119b3565b610a90565b005b3480156102e057600080fd5b506102fb60048036038101906102f691906119f3565b610bb8565b005b34801561030957600080fd5b50610312610cdd565b60405161031f9190611a58565b60405180910390f35b34801561033457600080fd5b5061033d610ce2565b60405161034a9190611a94565b60405180910390f35b34801561035f57600080fd5b5061037a60048036038101906103759190611530565b610cfa565b005b34801561038857600080fd5b50610391610e44565b60405161039e9190611a58565b60405180910390f35b6103af610e49565b005b3480156103bd57600080fd5b506103c66110ac565b005b3480156103d457600080fd5b506103dd6111b5565b005b3480156103eb57600080fd5b5061040660048036038101906104019190611530565b611391565b005b6104106114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461049f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049690611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2fde38b826040518263ffffffff1660e01b81526004016104f891906115e6565b600060405180830381600087803b15801561051257600080fd5b505af1158015610526573d6000803e3d6000fd5b5050505050565b734ced59c19f1f3a9eebd670f746b737acf504d1eb81565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b603460009054906101000a900460ff166105ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b190611b78565b60405180910390fd5b60335434146105fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f590611be4565b60405180910390fd5b60006106086114b6565b905073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e466038d7ea4c680007f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610681929190611c2a565b6000604051808303818588803b15801561069a57600080fd5b505af11580156106ae573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b600063150b7a0260e01b905095945050505050565b603460009054906101000a900460ff1681565b6107296114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146107b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107af90611b0c565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663c45a01556040518163ffffffff1660e01b8152600401602060405180830381865afa158015610817573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061083b9190611ca4565b73ffffffffffffffffffffffffffffffffffffffff166377394a0b7f0000000000000000000000000000000000000000000000000000000000000000306040518363ffffffff1660e01b8152600401610895929190611cd1565b600060405180830381600087803b1580156108af57600080fd5b505af11580156108c3573d6000803e3d6000fd5b50505050565b60335481565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006108fd6114b6565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166342842e0e8230866040518463ffffffff1660e01b815260040161095c93929190611cfa565b600060405180830381600087803b15801561097657600080fd5b505af115801561098a573d6000803e3d6000fd5b5050505073b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663aee6a2fe7f000000000000000000000000000000000000000000000000000000000000000085306040518463ffffffff1660e01b81526004016109ff93929190611d31565b600060405180830381600087803b158015610a1957600080fd5b505af1158015610a2d573d6000803e3d6000fd5b5050505081604051610a3f9190611de2565b6040518091039020838273ffffffffffffffffffffffffffffffffffffffff167f25371875ba959ab9f2b46353b3767d7e9f16f0c7958f87995f4fd8b490da715460405160405180910390a4505050565b610a986114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610b27576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b1e90611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638d5cdc2683836040518363ffffffff1660e01b8152600401610b82929190611df9565b600060405180830381600087803b158015610b9c57600080fd5b505af1158015610bb0573d6000803e3d6000fd5b505050505050565b610bc06114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c4f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4690611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166355f804b3826040518263ffffffff1660e01b8152600401610ca89190611e5b565b600060405180830381600087803b158015610cc257600080fd5b505af1158015610cd6573d6000803e3d6000fd5b5050505050565b601081565b73b8cf4a28da322598fdb78a1406a61b72d6f6b39681565b610d026114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610d91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d8890611b0c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610e00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df790611ec9565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b601081565b6000610e536114b6565b9050600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611f35565b60405180910390fd5b601080610ef29190611f84565b60ff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166361bc221a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f849190611fd0565b10610fc4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fbb90612049565b60405180910390fd5b73b8cf4a28da322598fdb78a1406a61b72d6f6b39673ffffffffffffffffffffffffffffffffffffffff1663d7e954e4347f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401611034929190611c2a565b6000604051808303818588803b15801561104d57600080fd5b505af1158015611061573d6000803e3d6000fd5b50505050508073ffffffffffffffffffffffffffffffffffffffff167f21aec557fe1c218e78259203357e235779aa30e2a146ff9e877cb0be5be75f3260405160405180910390a250565b6110b46114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611143576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113a90611b0c565b60405180910390fd5b603460009054906101000a900460ff1615603460006101000a81548160ff0219169083151502179055507f8ba9af8fef251a59a57bb383a518ff12b3c2770c23cf0ab9a59a9e2390e08f43603460009054906101000a900460ff166040516111ab9190611795565b60405180910390a1565b6111bd6114b6565b73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461124c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611243906120b5565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167fd4459d5b8b913cab0244230fd9b1c08b6ceace7fe9230e60d0f74cbffdf849d060405160405180910390a3600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6113996114b6565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161141f90611b0c565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631b86f18c826040518263ffffffff1660e01b815260040161148191906115e6565b600060405180830381600087803b15801561149b57600080fd5b505af11580156114af573d6000803e3d6000fd5b5050505050565b600033905090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006114fd826114d2565b9050919050565b61150d816114f2565b811461151857600080fd5b50565b60008135905061152a81611504565b92915050565b600060208284031215611546576115456114c8565b5b60006115548482850161151b565b91505092915050565b6000819050919050565b600061158261157d611578846114d2565b61155d565b6114d2565b9050919050565b600061159482611567565b9050919050565b60006115a682611589565b9050919050565b6115b68161159b565b82525050565b60006020820190506115d160008301846115ad565b92915050565b6115e0816114f2565b82525050565b60006020820190506115fb60008301846115d7565b92915050565b6000819050919050565b61161481611601565b811461161f57600080fd5b50565b6000813590506116318161160b565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261165c5761165b611637565b5b8235905067ffffffffffffffff8111156116795761167861163c565b5b60208301915083600182028301111561169557611694611641565b5b9250929050565b6000806000806000608086880312156116b8576116b76114c8565b5b60006116c68882890161151b565b95505060206116d78882890161151b565b94505060406116e888828901611622565b935050606086013567ffffffffffffffff811115611709576117086114cd565b5b61171588828901611646565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61175981611724565b82525050565b60006020820190506117746000830184611750565b92915050565b60008115159050919050565b61178f8161177a565b82525050565b60006020820190506117aa6000830184611786565b92915050565b6117b981611601565b82525050565b60006020820190506117d460008301846117b0565b92915050565b60006117e582611589565b9050919050565b6117f5816117da565b82525050565b600060208201905061181060008301846117ec565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6118648261181b565b810181811067ffffffffffffffff821117156118835761188261182c565b5b80604052505050565b60006118966114be565b90506118a2828261185b565b919050565b600067ffffffffffffffff8211156118c2576118c161182c565b5b6118cb8261181b565b9050602081019050919050565b82818337600083830152505050565b60006118fa6118f5846118a7565b61188c565b90508281526020810184848401111561191657611915611816565b5b6119218482856118d8565b509392505050565b600082601f83011261193e5761193d611637565b5b813561194e8482602086016118e7565b91505092915050565b6000806040838503121561196e5761196d6114c8565b5b600061197c85828601611622565b925050602083013567ffffffffffffffff81111561199d5761199c6114cd565b5b6119a985828601611929565b9150509250929050565b600080604083850312156119ca576119c96114c8565b5b60006119d88582860161151b565b92505060206119e985828601611622565b9150509250929050565b600060208284031215611a0957611a086114c8565b5b600082013567ffffffffffffffff811115611a2757611a266114cd565b5b611a3384828501611929565b91505092915050565b600060ff82169050919050565b611a5281611a3c565b82525050565b6000602082019050611a6d6000830184611a49565b92915050565b6000611a7e82611589565b9050919050565b611a8e81611a73565b82525050565b6000602082019050611aa96000830184611a85565b92915050565b600082825260208201905092915050565b7f6e6f7420676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611af6600c83611aaf565b9150611b0182611ac0565b602082019050919050565b60006020820190508181036000830152611b2581611ae9565b9050919050565b7f6d696e742d69732d6e6f742d656e61626c656400000000000000000000000000600082015250565b6000611b62601383611aaf565b9150611b6d82611b2c565b602082019050919050565b60006020820190508181036000830152611b9181611b55565b9050919050565b7f77726f6e672d6d696e742d6665652d7061696400000000000000000000000000600082015250565b6000611bce601383611aaf565b9150611bd982611b98565b602082019050919050565b60006020820190508181036000830152611bfd81611bc1565b9050919050565b50565b6000611c14600083611aaf565b9150611c1f82611c04565b600082019050919050565b6000606082019050611c3f60008301856115d7565b8181036020830152611c5081611c07565b9050611c5f60408301846115d7565b9392505050565b6000611c71826114f2565b9050919050565b611c8181611c66565b8114611c8c57600080fd5b50565b600081519050611c9e81611c78565b92915050565b600060208284031215611cba57611cb96114c8565b5b6000611cc884828501611c8f565b91505092915050565b6000604082019050611ce660008301856115d7565b611cf360208301846115d7565b9392505050565b6000606082019050611d0f60008301866115d7565b611d1c60208301856115d7565b611d2960408301846117b0565b949350505050565b6000606082019050611d4660008301866115d7565b611d5360208301856117b0565b611d6060408301846115d7565b949350505050565b600081519050919050565b600081905092915050565b60005b83811015611d9c578082015181840152602081019050611d81565b83811115611dab576000848401525b50505050565b6000611dbc82611d68565b611dc68185611d73565b9350611dd6818560208601611d7e565b80840191505092915050565b6000611dee8284611db1565b915081905092915050565b6000604082019050611e0e60008301856115d7565b611e1b60208301846117b0565b9392505050565b6000611e2d82611d68565b611e378185611aaf565b9350611e47818560208601611d7e565b611e508161181b565b840191505092915050565b60006020820190508181036000830152611e758184611e22565b905092915050565b7f696e76616c69642070726f706f73656420676f7665726e6f7200000000000000600082015250565b6000611eb3601983611aaf565b9150611ebe82611e7d565b602082019050919050565b60006020820190508181036000830152611ee281611ea6565b9050919050565b7f6e6f742d676f7665726e6f720000000000000000000000000000000000000000600082015250565b6000611f1f600c83611aaf565b9150611f2a82611ee9565b602082019050919050565b60006020820190508181036000830152611f4e81611f12565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f8f82611a3c565b9150611f9a83611a3c565b92508260ff03821115611fb057611faf611f55565b5b828201905092915050565b600081519050611fca8161160b565b92915050565b600060208284031215611fe657611fe56114c8565b5b6000611ff484828501611fbb565b91505092915050565b7f676f7665726e6f722d6d696e742d706572696f642d6f76657200000000000000600082015250565b6000612033601983611aaf565b915061203e82611ffd565b602082019050919050565b6000602082019050818103600083015261206281612026565b9050919050565b7f6e6f74207468652070726f706f73656420676f7665726e6f7200000000000000600082015250565b600061209f601983611aaf565b91506120aa82612069565b602082019050919050565b600060208201905081810360008301526120ce81612092565b905091905056fea2646970667358221220d7e7ba67096b1daa38ecdaaa6ad7f8b05a0b50d6c9ee561f90603b06661767f864736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "acceptGovernorship()": {
        "details": "Allows new governor to accept governorship of the contract."
      },
      "burn(uint256,string)": {
        "params": {
          "btcAddress": "the address on Bitcoin which will recieve the corresponding OO",
          "id_": "OO id to burn"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "This function enables this contract to receive ERC721 tokens"
      },
      "transferCollectionOwnership(address)": {
        "params": {
          "newOwner_": "Address of new owner"
        }
      },
      "transferGovernorship(address)": {
        "details": "Transfers governorship of the contract to a new account (`proposedGovernor`). Can only be called by the current governor."
      },
      "updateBaseURI(string)": {
        "params": {
          "baseURI_": "New baseURI string"
        }
      },
      "updateMetamaster(address)": {
        "params": {
          "metamaster_": "Address of new metamaster"
        }
      },
      "updateRoyaltyConfig(address,uint256)": {
        "params": {
          "royaltyRate_": "Royalty rate in Basis Points. ie. 100 = 1%, 10_000 = 100%",
          "royaltyReceiver_": "Address of royalty receiver"
        }
      }
    },
    "title": "OrdinaryOranges",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "OOMintFee()": {
        "notice": "Mint Fee"
      },
      "TEAM_MINT()": {
        "notice": "Team and giveaway mints"
      },
      "burn(uint256,string)": {
        "notice": "Burn an OO"
      },
      "claimCollectionBurnerRole()": {
        "notice": "Update collection burner. Add self address as collection burner for OO"
      },
      "governorMint()": {
        "notice": "Governor Mint"
      },
      "isMintEnabled()": {
        "notice": "Flag indicating whether the OO mint is enabled."
      },
      "mint()": {
        "notice": "Mint an Ordinary Orange to caller address"
      },
      "toggleMint()": {
        "notice": "onlyGovernor:: Toggle minting status of the Ordinary Oranges"
      },
      "transferCollectionOwnership(address)": {
        "notice": "onlyGovernor:: Transfer ownership of the Ordinary Oranges collection"
      },
      "updateBaseURI(string)": {
        "notice": "onlyGovernor:: Set the collection baseURI"
      },
      "updateMetamaster(address)": {
        "notice": "onlyGovernor:: Transfer metamaster of the Ordinary Oranges collection"
      },
      "updateRoyaltyConfig(address,uint256)": {
        "notice": "onlyGovernor:: Update royalty receiver and rate in Ordinary Oranges collection"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 25,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 28,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 966,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "governor",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 968,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "proposedGovernor",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1090,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 669,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "OOMintFee",
        "offset": 0,
        "slot": "51",
        "type": "t_uint256"
      },
      {
        "astId": 672,
        "contract": "contracts/OrdinaryOranges.sol:OrdinaryOranges",
        "label": "isMintEnabled",
        "offset": 0,
        "slot": "52",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}